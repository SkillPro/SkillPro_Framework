<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnifiedAutomation.UaClient</name>
    </assembly>
    <members>
        <member name="T:UnifiedAutomation.UaClient.MethodDescription">
            @ingroup UaClientLibraryHelper
             <summary>
             Stores the information used to call a method.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodDescription.MethodId">
            <summary>
            Gets or sets the method id.
            </summary>
            <value>
            The method id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodDescription.BrowseName">
            <summary>
            Gets or sets the browse name.
            </summary>
            <value>
            The browse name.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodDescription.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodDescription.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodDescription.InputArguments">
            <summary>
            Gets or sets the input arguments.
            </summary>
            <value>
            The input arguments.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodDescription.OutputArguments">
            <summary>
            Gets or sets the output arguments.
            </summary>
            <value>
            The output arguments.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodDescription.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.MethodInvocation">
            @ingroup UaClientLibraryHelper
             <summary>
             The method invocation.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodInvocation.ObjectId">
            <summary>
            Gets or sets the object id.
            </summary>
            <value>
            The object id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodInvocation.MethodId">
            <summary>
            Gets or sets the method id.
            </summary>
            <value>
            The method id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodInvocation.Error">
            <summary>
            Gets or sets the error for the method invocation.
            </summary>
            <value>
            The error the method invocation.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodInvocation.InputArguments">
            <summary>
            Gets or sets the input arguments.
            </summary>
            <value>
            The input arguments.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodInvocation.InputArgumentErrors">
            <summary>
            Gets or sets the input argument errors.
            </summary>
            <value>
            The input argument errors.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodInvocation.OutputArguments">
            <summary>
            Gets or sets the output arguments.
            </summary>
            <value>
            The output arguments.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodInvocation.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.HistoryDataReadResult">
            @ingroup UaClientLibraryHelper
             <summary>
             A result for a history data read operation.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryDataReadResult.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryDataReadResult.ContinuationPoint">
            <summary>
            Gets or sets the continuation point.
            </summary>
            <value>
            The continuation point.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryDataReadResult.DataValues">
            <summary>
            Gets or sets the data values.
            </summary>
            <value>
            The data values.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryDataReadResult.ModificationInfo">
            <summary>
            Gets or sets the modification info.
            </summary>
            <value>
            The modification info.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Discovery">
            @ingroup UaClientApi
             <summary>
             The settings for a request.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.#ctor">
            <summary>
            Create a session for the default client application.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Create a session for the specified client application.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.FindServers(System.String)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.FindServers(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="applicationUris">The application uris.</param>
            <param name="settings">The request settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.FindServers(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="transportProfileUri">The transport profile URI.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="applicationUris">The application uris.</param>
            <param name="settings">The request settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginFindServers(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="applicationUris">The application uris.</param>
            <param name="settings">The request settings.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the EndFindServers() method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginFindServers(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="transportProfileUri">The transport profile URI.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="applicationUris">The application uris.</param>
            <param name="settings">The request settings.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the EndFindServers() method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginFindServers(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the EndFindServers() method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.EndFindServers(System.IAsyncResult)">
            <summary>
            Completes an asynchronous disconnect operation.
            </summary>
            <param name="result">The object returned from the BeginFindServers method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.OnFindServersComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.GetEndpoints(System.String)">
            <summary>
            Gets the endpoints.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.GetEndpoints(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Gets the endpoints.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="profileUris">The profile uris.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.GetEndpoints(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Gets the endpoints.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="transportProfileUri">The transport profile URI.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="profileUris">The profile uris.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginGetEndpoints(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get endpoints.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="profileUris">The application uris.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginGetEndpoints(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get endpoints.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="transportProfileUri">The transport profile URI.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="profileUris">The application uris.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginGetEndpoints(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get endpoints.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.EndGetEndpoints(System.IAsyncResult)">
            <summary>
            Ends the get endpoints.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.OnGetEndpointsComplete(System.IAsyncResult)">
            <summary>
            Called when [get endpoints complete].
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.GetMostSecureEndpoint(System.String)">
            <summary>
            Returns the most secure endpoint supported by a server.
            </summary>
            <param name="discoveryUrl">The server's discovery URL.</param>
            <returns>The most secure endpoint.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginGetMostSecureEndpoint(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins a request for the most secure endpoint supported by a server.
            </summary>
            <param name="discoveryUrl">The server's discovery URL.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.EndGetMostSecureEndpoint(System.IAsyncResult)">
            <summary>
            Ends the get endpoints.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.SelectEndpoint(System.Uri,System.Boolean,System.String,System.Collections.Generic.List{UnifiedAutomation.UaBase.EndpointDescription})">
            <summary>
            Selects the endpoint.
            </summary>>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.GetEndpointConfiguration(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Gets the endpoint configuration.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The endpoint configuration to use.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.GetDiscoveryUrlFromUrl(System.Uri,System.String)">
            <summary>
            Gets the discovery URL from URL.
            </summary>
            <param name="endpointUrl">The endpoint URL.</param>
            <param name="transportProfileUri">The transport profile URI.</param>
            <returns>
            The discovery URL.
            </returns>
            <remarks>
            This method assumes that WS-* based endpoints use the '/discovery' suffix.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.GetRequestHeader(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Gets the request header.
            </summary>
            <param name="settings">The request settings to use.</param>
            <returns>The request header.</returns>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Discovery.Application">
            <summary>
            Gets the application.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Discovery.DefaultRequestSettings">
            <summary>
            Gets or sets the default request settings.
            </summary>
            <value>
            The default request settings.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Discovery.SecureChannelTimeout">
            <summary>
            Gets or sets the secure channel timeout.
            </summary>
            <value>
            The secure channel timeout.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Discovery.FindServersAsyncResult">
            <summary>
            Stores state information for asynchronous read operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Discovery.GetEndpointsAsyncResult">
             <summary>
            
             </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.BrowseContext">
            @ingroup UaClientLibraryHelper
             <summary>
             The context fr a browse operation.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.BrowseContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.BrowseContext"/> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.BrowseContext.View">
            <summary>
            Gets or sets the view.
            </summary>
            <value>
            The view.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.BrowseContext.MaxReferencesToReturn">
            <summary>
            Gets or sets the max references to return.
            </summary>
            <value>
            The max references to return.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.BrowseContext.BrowseDirection">
            <summary>
            Gets or sets the browse direction.
            </summary>
            <value>
            The browse direction.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.BrowseContext.ReferenceTypeId">
            <summary>
            Gets or sets the reference type id.
            </summary>
            <value>
            The reference type id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.BrowseContext.IncludeSubtypes">
            <summary>
            Gets or sets a value indicating whether include subtypes of the reference type.
            </summary>
            <value>
              <c>true</c> if subtypes of the reference type are included; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.BrowseContext.NodeClassMask">
            <summary>
            Gets or sets the node class mask.
            </summary>
            <value>
            The node class mask.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.BrowseContext.ResultMask">
            <summary>
            Gets or sets the result mask.
            </summary>
            <value>
            The result mask.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.HistoryEventUpdateResult">
            @ingroup UaClientLibraryHelper
             <summary>
             A result for a history event update operation.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryEventUpdateResult.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryEventUpdateResult.OperationResults">
            <summary>
            Gets or sets the results for the individual values.
            </summary>
            <value>
            The results for the individual values.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Subscription">
            @ingroup UaClientApi
             <summary>
             A subscription with the server.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.#ctor(UnifiedAutomation.UaClient.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.Subscription"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Save(UnifiedAutomation.UaBase.IEncoder)">
            <summary>
            Saves Subscription using the specified encoder.
            </summary>
            <param name="encoder">The encoder.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Load(UnifiedAutomation.UaBase.IDecoder)">
            <summary>
            Initializes the Subscription using the specified decoder.
            </summary>
            <param name="decoder">The decoder.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Create">
            <summary>
            Creates a new subscription on the server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Create(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Creates a new subscription on the server.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginCreate(UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Creates a new subscription on the server.
            </summary>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndCreate(System.IAsyncResult)">
            <summary>
            Ends a create operation.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnCreateComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous Create operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnCreateMonitoredItemsAfterCreateComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous Create operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Modify">
            <summary>
            Modifys a new subscription on the server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Modify(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Modifys a new subscription on the server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginModify(UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Modifys a new subscription on the server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndModify(System.IAsyncResult)">
            <summary>
            Ends a modify operation.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnModifyComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous Modify operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnSetPublishingModeComplete(System.IAsyncResult)">
            <summary>
            Called when mse publishing mode completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Delete">
            <summary>
            Modifys a new subscription on the server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Delete(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Modifys a new subscription on the server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginDelete(UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Modifys a new subscription on the server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndDelete(System.IAsyncResult)">
            <summary>
            Ends a delete operation.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnDeleteComplete(System.IAsyncResult)">
            <summary>
            Called when delete subscription completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Transfer(System.UInt32,System.Collections.Generic.List{System.UInt32},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Transfers the specified subscription id.
            </summary>
            <param name="subscriptionId">The subscription id.</param>
            <param name="availableSequenceNumbers">The available sequence numbers.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Recreate(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Recreates the subcription.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Reactivate(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Reactivates the subcription.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnRepublishAfterReactivateComplete(System.IAsyncResult)">
            <summary>
            Called when a republish operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnRepublishAfterTransferComplete(System.IAsyncResult)">
            <summary>
            Called when a republish operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnRecreateComplete(System.IAsyncResult)">
            <summary>
            Called when a subscription is re-created.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.CreateMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem})">
            <summary>
            Creates a list of monitored items in the subscriptions. The monitored items could be data monitored items or event monitored items.
            </summary>
            <param name="monitoredItems">ref:</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.CreateMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Creates the monitored items.
            </summary>
            <param name="monitoredItems">The monitored items.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginCreateMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous call to create a list of monitored items in the subscriptions. The monitored items could be data monitored items or event monitored items.
            </summary>
            <param name="monitoredItems">The monitored items.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <remarks>
            If this method is called before the Subscription is created the MonitoredItems are saved and the return status is
            GoodCallAgain. The MonitoredItems will be automatically created after the Subscription is created. Any errors are
            reported in the LastError property of the MonitoredItem object.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndCreateMonitoredItems(System.IAsyncResult)">
            <summary>
            Ends a create monitored items operation.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnCreateMonitoredItemsComplete(System.IAsyncResult)">
            <summary>
            Called when create monitored items operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.ModifyMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem})">
            <summary>
            Modifies the monitored items.
            </summary>
            <param name="monitoredItems">The monitored items.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.ModifyMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Modifies the monitored items.
            </summary>
            <param name="monitoredItems">The monitored items.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginModifyMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Modifies the monitored items.
            </summary>
            <param name="monitoredItems">The monitored items.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndModifyMonitoredItems(System.IAsyncResult)">
            <summary>
            Ends a modify monitored items operation.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnModifyMonitoredItemsComplete(System.IAsyncResult)">
            <summary>
            Called when modify monitored items operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.DeleteMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem})">
            <summary>
            Deletes the monitored items.
            </summary>
            <param name="monitoredItems">The monitored items.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.DeleteMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Deletes the monitored items.
            </summary>
            <param name="monitoredItems">The monitored items.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginDeleteMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Deletes the monitored items.
            </summary>
            <param name="monitoredItems">The monitored items.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndDeleteMonitoredItems(System.IAsyncResult)">
            <summary>
            Ends a delete monitored items operation.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnDeleteMonitoredItemsComplete(System.IAsyncResult)">
            <summary>
            Called when create monitored items operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.SetMonitoringMode(UnifiedAutomation.UaBase.MonitoringMode,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem})">
            <summary>
            Modifies the monitored items.
            </summary>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="monitoredItems">The monitored items.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.SetMonitoringMode(UnifiedAutomation.UaBase.MonitoringMode,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Modifies the monitored items.
            </summary>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="monitoredItems">The monitored items.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginSetMonitoringMode(UnifiedAutomation.UaBase.MonitoringMode,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Modifies the monitored items.
            </summary>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="monitoredItems">The monitored items.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndSetMonitoringMode(System.IAsyncResult)">
            <summary>
            Ends a set monitoring mode operation.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnSetMonitoringModeComplete(System.IAsyncResult)">
            <summary>
            Called when set monitoring mode operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Republish(System.UInt32)">
            <summary>
            Republishes the specified message.
            </summary>
            <param name="retransmitSequenceNumber">The retransmit sequence number.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Republish(System.UInt32,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Republishes the specified message.
            </summary>
            <param name="retransmitSequenceNumber">The retransmit sequence number.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginRepublish(System.UInt32,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Republishes the specified retransmit sequence number.
            </summary>
            <param name="retransmitSequenceNumber">The retransmit sequence number.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndRepublish(System.IAsyncResult)">
            <summary>
            Ends a republish operation.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnRepublishComplete(System.IAsyncResult)">
            <summary>
            Called when a republish operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.PublishReceived(System.Collections.Generic.List{System.UInt32},System.Boolean,UnifiedAutomation.UaBase.NotificationMessage)">
            <summary>
            Processes a publish received from the server.
            </summary>
            <param name="availableSequenceNumbers">The available sequence numbers.</param>
            <param name="moreNotifications">if set to <c>true</c> [more notifications].</param>
            <param name="notificationMessage">The notification message.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.GetAcknowledgements(UnifiedAutomation.UaBase.SubscriptionAcknowledgementCollection)">
            <summary>
            Gets the acknowledgements for previous notification messages.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.UpdateStatus(UnifiedAutomation.UaClient.SubscriptionConnectionStatus,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Changes the subscription status.
            </summary>
            <param name="newStatus">The new status.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnWatchdogCycle(System.Object)">
            <summary>
            Called when watchdog cycle runs.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.RaiseNotificationMessageReceivedEvent(UnifiedAutomation.UaBase.NotificationMessage,System.Boolean)">
            <summary>
            Raises a NotificationMessageReceived event.
            </summary>
            <param name="message">The message.</param>
            <param name="republish">if set to <c>true</c> the message was republished.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.RaiseDataChangedEvent(UnifiedAutomation.UaBase.NotificationMessage,System.Boolean)">
            <summary>
            Raises a DataChanged event.
            </summary>
            <param name="message">The message.</param>
            <param name="republish">if set to <c>true</c> the message was republished.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.RaiseNewEventsEvent(UnifiedAutomation.UaBase.NotificationMessage,System.Boolean)">
            <summary>
            Raises a NewEvents event.
            </summary>
            <param name="message">The message.</param>
            <param name="republish">if set to <c>true</c> the message was republished.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.CheckSequenceNumber(System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Checks the sequence number.
            </summary>
            <param name="sequenceNumber">The sequence number.</param>
            <param name="availableSequenceNumbers">The available sequence numbers.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.CheckInState(UnifiedAutomation.UaClient.Subscription.State)">
            <summary>
            Checks the state of the subscription.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.CheckNotInState(UnifiedAutomation.UaClient.Subscription.State)">
            <summary>
            Checks the state of the subscription.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.Session">
            <summary>
            Gets the session.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.ConnectionStatus">
            <summary>
            Gets the connection status for the subscription.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.SubscriptionId">
            <summary>
            Gets the subscription id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.DefaultTimestampsToReturn">
            <summary>
            Gets or sets the default timestamp to return.
            </summary>
            <value>
            The default timestamp to return.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.DefaultRequestSettings">
            <summary>
            Gets or sets the default request settings.
            </summary>
            <value>
            The default request settings.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.PublishingInterval">
            <summary>
            Gets or sets the publishing interval (in milliseconds).
            </summary>
            <value>
            The publishing interval.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.CurrentPublishingInterval">
            <summary>
            Gets the current publishing interval (in milliseconds).
            </summary>
            <value>
            The current publishing interval.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.Lifetime">
            <summary>
            Gets or sets the lifetime (in milliseconds).
            </summary>
            <value>
            The lifetime.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.CurrentLifetime">
            <summary>
            Gets the current life time (in milliseconds).
            </summary>
            <value>
            The current life time.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.MaxKeepAliveTime">
            <summary>
            Gets or sets the max keep alive time (in milliseconds).
            </summary>
            <value>
            The max keep alive time.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.CurrentMaxKeepAliveTime">
            <summary>
            Gets the current max keep alive time (in milliseconds).
            </summary>
            <value>
            The current max keep alive time.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.MaxNotificationsPerPublish">
            <summary>
            Gets or sets the max notifications per publish.
            </summary>
            <value>
            The max notifications per publish.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.CurrentMaxNotificationsPerPublish">
            <summary>
            Gets the current max notifications per publish.
            </summary>
            <value>
            The current max notifications per publish.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.PublishingEnabled">
            <summary>
            Gets or sets a value indicating whether publishing is enabled.
            </summary>
            <value>
              <c>true</c> if publishing is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.CurrentPublishingEnabled">
            <summary>
            Gets a value indicating whether publishing is currently enabled.
            </summary>
            <value>
            <c>true</c> if publishing is currently enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.CurrentPriority">
            <summary>
            Gets the current priority.
            </summary>
            <value>
            The current priority.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.MonitoredItems">
            <summary>
            Gets the monitored items in the subscription.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Subscription.DataChanged">
            <summary>
            Occurs when any subscribed data values have changed.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Subscription.NewEvents">
            <summary>
            Occurs when any new events have arrived.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Subscription.StatusChanged">
            <summary>
            Occurs when the status of subscription changes.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Subscription.NotificationMessageReceived">
            <summary>
            Occurs when a new notification message arrives.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Subscription.MissingSequenceNumber">
            <summary>
            Occurs when a sequence number is missing.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Subscription.ModifyAsyncResult">
            <summary>
            Stores state information for asynchronous browse operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Subscription.TransferCallbackData">
            <summary>
            Stores state information for asynchronous transfer operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Subscription.CreateMonitoredItemsAsyncResult">
            <summary>
            Stores state information for asynchronous create monitored items operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Subscription.RepublishAsyncResult">
            <summary>
            Stores state information for asynchronous create monitored items operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Subscription.State">
            <summary>
            The possible states for the subscription.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.Subscription.State.Deleted">
            <summary>
            The subscription has not been created on the server.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.Subscription.State.Created">
            <summary>
            The subscription has been created on the server.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.Subscription.State.Error">
            <summary>
            The subscription is in an error state.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SubscriptionConnectionStatus">
            @ingroup UaClientLibraryHelper
             <summary>
             The possible states for a subscription.
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SubscriptionConnectionStatus.Deleted">
            <summary>
            The subscription has not been created on the server.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SubscriptionConnectionStatus.Created">
            <summary>
            The subcription was created on the server.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SubscriptionConnectionStatus.Transferred">
            <summary>
            The subcription was transferred from another session.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SubscriptionConnectionStatus.WarningKeepAliveLate">
            <summary>
            The keep alive for the subscription is late.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SubscriptionConnectionStatus.Error">
            <summary>
            The subscription is in an error state.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.DataChange">
            @ingroup UaClientLibraryHelper
             <summary>
             A data change notification.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataChange.MonitoredItem">
            <summary>
            Gets or sets the monitored item.
            </summary>
            <value>
            The monitored item.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataChange.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataChange.Republish">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:UnifiedAutomation.UaClient.DataChange"/> is republish.
            </summary>
            <value>
              <c>true</c> if a republish; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.DataChangedEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a DataChanged occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataChangedEventArgs.#ctor(System.Collections.Generic.List{UnifiedAutomation.UaClient.DataChange})">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataChangedEventArgs.DataChanges">
            <summary>
            Gets or sets the data changes.
            </summary>
            <value>
            The data changes.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.DataChangedEventHandler">
            <summary>
            Used to handle DataChanged events.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.NewEvent">
            @ingroup UaClientLibraryHelper
             <summary>
             An event notification.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEvent.Get``1(System.String)">
            <summary>
            Gets the specified browse path.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEvent.Get``1(``0,System.String)">
            <summary>
            Gets the specified default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">The default value.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEvent.Get``1(``0,UnifiedAutomation.UaBase.StringTable,System.String)">
            <summary>
            Gets the specified default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">The default value.</param>
            <param name="sourceTable">The source table.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEvent.Get``1(UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Gets the specified browse path.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEvent.Get``1(``0,UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Gets the specified default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">The default value.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEvent.Get``1(UnifiedAutomation.UaBase.StringTable,UnifiedAutomation.UaBase.AbsoluteName[])">
            <summary>
            Gets the specified source table.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceTable">The source table.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEvent.Get``1(``0,UnifiedAutomation.UaBase.StringTable,UnifiedAutomation.UaBase.AbsoluteName[])">
            <summary>
            Gets the specified default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">The default value.</param>
            <param name="sourceTable">The source table.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaClient.NewEvent.MonitoredItem">
            <summary>
            Gets or sets the monitored item.
            </summary>
            <value>
            The monitored item.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.NewEvent.Event">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.NewEvent.Republish">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:UnifiedAutomation.UaClient.DataChange"/> is republish.
            </summary>
            <value>
              <c>true</c> if a republish; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.NewEventsEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a NewEvents occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEventsEventArgs.#ctor(System.Collections.Generic.List{UnifiedAutomation.UaClient.NewEvent})">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.NewEventsEventArgs.Events">
            <summary>
            Gets or sets the events.
            </summary>
            <value>
            The events.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.NewEventsEventHandler">
            <summary>
            Used to handle
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.NotificationMessageReceivedEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a NotificationMessageReceived occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NotificationMessageReceivedEventArgs.#ctor(UnifiedAutomation.UaBase.NotificationMessage,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.NotificationMessageReceivedEventArgs"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="republish">if set to <c>true</c> then it was returned in a Republish call.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.NotificationMessageReceivedEventArgs.NotificationMessage">
            <summary>
            Gets the notification message.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.NotificationMessageReceivedEventArgs.Republish">
            <summary>
            Whether the message was returned in a Republish operation.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.NotificationMessageReceivedEventArgs.Confirmed">
            <summary>
            Gets or sets a value indicating whether this message should be confirmed.
            </summary>
            <value>
              <c>true</c> if the message has been confirmed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.NotificationMessageReceivedEventHandler">
            <summary>
            Used to handle NotificationMessageReceived events.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="e">The <see cref="T:UnifiedAutomation.UaClient.NotificationMessageReceivedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.MissingSequenceNumberEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a MissingSequenceNumber occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.MissingSequenceNumberEventArgs.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MissingSequenceNumberEventArgs.CurrentSequenceNumber">
            <summary>
            Gets the current sequence number.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MissingSequenceNumberEventArgs.LastNumberInSequence">
            <summary>
            Gets the last number received in sequence.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MissingSequenceNumberEventArgs.LargestSequenceNumber">
            <summary>
            Gets the largest sequence numeber received.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MissingSequenceNumberEventArgs.AvailableSequenceNumbers">
            <summary>
            The list of sequence numbers which are available for a republish.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MissingSequenceNumberEventArgs.Reset">
            <summary>
            Whether to reset the sequence number counters when the callback completes.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.MissingSequenceNumberEventHandler">
            <summary>
            Used to report missing messages.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.RepublishErrorEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a RepublishError occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.RepublishErrorEventArgs.#ctor(System.UInt32,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.RepublishErrorEventArgs.SequenceNumber">
            <summary>
            Gets the sequence number.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.RepublishErrorEventArgs.Error">
            <summary>
            The error code.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.RepublishErrorEventHandler">
            <summary>
            Used to report missing messages.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SubscriptionStatusChangedEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a SubscriptionStatusChanged occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SubscriptionStatusChangedEventArgs.#ctor(UnifiedAutomation.UaClient.SubscriptionConnectionStatus,UnifiedAutomation.UaClient.SubscriptionConnectionStatus,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SubscriptionStatusChangedEventArgs.CurrentStatus">
            <summary>
            Gets the current status.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SubscriptionStatusChangedEventArgs.OldStatus">
            <summary>
            Gets the previous status.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SubscriptionStatusChangedEventArgs.Error">
            <summary>
            Gets the error associated with the change.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SubscriptionStatusChangedEventHandler">
            <summary>
            Used to report status change events.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.MonitoredItemOperationCompleteEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a RepublishError occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.MonitoredItemOperationCompleteEventArgs.#ctor(System.Collections.Generic.List{UnifiedAutomation.UaClient.MonitoredItem},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Object)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItemOperationCompleteEventArgs.MonitoredItems">
            <summary>
            Gets the monitored items.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItemOperationCompleteEventArgs.Results">
            <summary>
            Gets the results.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItemOperationCompleteEventArgs.UserData">
            <summary>
            Gets the user data.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.MonitoredItemOperationCompleteEventHandler">
            <summary>
            Used to report missing messages.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.RequestSettings">
            @ingroup UaClientLibraryHelper
             <summary>
             The settings for a request.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.RequestSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.RequestSettings"/> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.RequestSettings.OperationTimeout">
            <summary>
            Gets or sets the operation timeout.
            </summary>
            <value>
            The timeout for the service call in milliseconds. The default setting is 30 seconds..
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.RequestSettings.DiagnosticsMasks">
            <summary>
            Gets or sets the diagnostics masks.
            </summary>
            <value>
            Bit mask that defines the diagnostic information to be returned from the server. The default setting is SymbolicIdAndText.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.RequestSettings.RequestId">
            <summary>
            Gets or sets the request id.
            </summary>
            <value>
            The request id. The default value is 0.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.RequestSettings.MaxOperationsPerRequest">
            <summary>
            Gets or sets the max operations per request.
            </summary>
            <value>
            The maximum number of operations per service request sent to the OPC UA server. The SDK splits the calls if necessary. The default value is UInt16.MaxValue.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.TypeDescription">
            @ingroup UaClientLibraryHelper
             <summary>
             The description of a type.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TypeDescription.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TypeDescription.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.TypeId">
            <summary>
            Gets or sets the type id.
            </summary>
            <value>
            The type id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.BrowseName">
            <summary>
            Gets or sets the name of the browse.
            </summary>
            <value>
            The name of the browse.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.NodeClass">
            <summary>
            Gets or sets the node class.
            </summary>
            <value>
            The node class.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.BaseTypeId">
            <summary>
            Gets or sets the base type id.
            </summary>
            <value>
            The base type id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.Fields">
            <summary>
            Gets or sets the fields.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.BaseType">
            <summary>
            Gets or sets the base type.
            </summary>
            <value>
            The base type.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.TypeFieldDescription">
            @ingroup UaClientLibraryHelper
             <summary>
             The description of a type field.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TypeFieldDescription.GetBrowsePath">
            <summary>
            Gets the browse path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TypeFieldDescription.UpdatePaths">
            <summary>
            Updates the paths.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TypeFieldDescription.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TypeFieldDescription.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.FieldId">
            <summary>
            Gets or sets the field id.
            </summary>
            <value>
            The node id of the field belonging to a type.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.BrowseName">
            <summary>
            Gets or sets the name of the browse.
            </summary>
            <value>
            The name of the browse.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.NodeClass">
            <summary>
            Gets or sets the node class.
            </summary>
            <value>
            The node class.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.TypeDefinitionId">
            <summary>
            Gets or sets the type definition id.
            </summary>
            <value>
            The type definition id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.DataTypeId">
            <summary>
            Gets or sets the data type id.
            </summary>
            <value>
            The data type id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.ValueRank">
            <summary>
            Gets or sets the value rank.
            </summary>
            <value>
            The value rank.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.DeclaringType">
            <summary>
            Gets or sets the type of the declaring.
            </summary>
            <value>
            The type of the declaring.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.ParentField">
            <summary>
            Gets or sets the parent field.
            </summary>
            <value>
            The parent field.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.OverriddenField">
            <summary>
            Gets or sets the overridden field.
            </summary>
            <value>
            The overridden field.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.BrowsePath">
            <summary>
            Gets the browse path.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.DisplayPath">
            <summary>
            Gets the display path.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.HistoryEventReadResult">
            @ingroup UaClientLibraryHelper
             <summary>
             A result for a history event read operation.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryEventReadResult.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryEventReadResult.ContinuationPoint">
            <summary>
            Gets or sets the continuation point.
            </summary>
            <value>
            The continuation point.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryEventReadResult.Events">
            <summary>
            Gets or sets the events
            </summary>
            <value>
            The events.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.MonitoredItem">
            @ingroup UaClientLibraryHelper
             <summary>
             An item being monitored.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.MonitoredItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.MonitoredItem"/> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.MonitoredItem.#ctor(UnifiedAutomation.UaClient.MonitoredItem)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.MonitoredItem"/> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.MonitoredItem.Save(UnifiedAutomation.UaBase.IEncoder)">
            <summary>
            Saves MonitoredItem using the specified encoder.
            </summary>
            <param name="encoder">The encoder.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.MonitoredItem.Load(UnifiedAutomation.UaBase.IDecoder)">
            <summary>
            Initializes the MonitoredItem using the specified decoder.
            </summary>
            <param name="decoder">The decoder.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.NodeId">
            <summary>
            Gets or sets the node id.
            </summary>
            <value>
            The node id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.AttributeId">
            <summary>
            Gets or sets the attribute id.
            </summary>
            <value>
            The attribute id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.Subscription">
            <summary>
            Gets the subscription.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.ServerHandle">
            <summary>
            Gets the server handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.ClientHandle">
            <summary>
            Gets the client handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.SamplingInterval">
            <summary>
            Gets or sets the sampling interval.
            </summary>
            <value>
            The sampling interval.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.CurrentSamplingInterval">
            <summary>
            Gets the current sampling interval.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.QueueSize">
            <summary>
            Gets or sets the size of the queue.
            </summary>
            <value>
            The size of the queue.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.CurrentQueueSize">
            <summary>
            Gets the size of the current queue.
            </summary>
            <value>
            The size of the current queue.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.DiscardOldest">
            <summary>
            Gets or sets a value indicating whether to discard the oldest entries when the queue overflows.
            </summary>
            <value>
              <c>true</c> if whether to discard the oldest entries when the queue overflows; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.CurrentDiscardOldest">
            <summary>
            Gets a value indicating whether discard the oldest entries when the queue overflows.
            </summary>
            <value>
            <c>true</c> if discard the oldest entries when the queue overflows; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.MonitoringMode">
            <summary>
            Gets or sets the monitoring mode.
            </summary>
            <value>
            The monitoring mode.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.CurrentMonitoringMode">
            <summary>
            Gets the current monitoring mode.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.LastError">
            <summary>
            Gets the last error.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.LastFilterError">
            <summary>
            Gets the last error for the monitoring filter.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ItemEventFilter">
            @ingroup UaClientLibraryHelper
             <summary>
             A filter for an Event monitored item.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaBase.EventFilter"/> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.#ctor(UnifiedAutomation.UaBase.StringTable)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaBase.EventFilter"/> class.
            </summary>
            <param name="namespaceUris">The namespace uris.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.SetDefault">
            <summary>
            Sets the default filter.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.EventFieldList,UnifiedAutomation.UaBase.QualifiedName,``0)">
            <summary>
            Gets the field value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="browseName">Name of the browse.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.EventFieldList,UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName,``0)">
            <summary>
            Gets the field value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="typeId">The type id.</param>
            <param name="browseName">Name of the browse.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.EventFieldList,UnifiedAutomation.UaBase.QualifiedName[],``0)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="browsePath">The browse path.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.EventFieldList,UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName[],``0)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.HistoryEventFieldList,UnifiedAutomation.UaBase.QualifiedName,``0)">
            <summary>
            Gets the field value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="browseName">Name of the browse.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.HistoryEventFieldList,UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName,``0)">
            <summary>
            Gets the field value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="typeId">The type id.</param>
            <param name="browseName">Name of the browse.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.HistoryEventFieldList,UnifiedAutomation.UaBase.QualifiedName[],``0)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="browsePath">The browse path.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.HistoryEventFieldList,UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName[],``0)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.ToEventFilter">
            <summary>
            Returns an event filter that can be used in a call to the server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.ToString(UnifiedAutomation.UaClient.Session,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="session">The session.</param>
            <param name="element">The element.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.ToString(UnifiedAutomation.UaClient.Session,UnifiedAutomation.UaBase.ContentFilterElement,System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="session">The session.</param>
            <param name="element">The element.</param>
            <param name="index">The index.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:UnifiedAutomation.UaClient.ItemEventFilter.SelectClauses">
            <summary>
            Gets or sets the select clauses.
            </summary>
            <value>
            The select clauses.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.ItemEventFilter.WhereClauses">
            <summary>
            Gets or sets the where clauses.
            </summary>
            <value>
            The where clauses.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SelectClauseCollection">
            <summary>
            A collection of select clauses.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.SelectClauseCollection"/> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.#ctor(UnifiedAutomation.UaBase.StringTable)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.SelectClauseCollection"/> class.
            </summary>
            <param name="namespaceUris">The namespace uris.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.GetDisplayText(System.Int32)">
            <summary>
            Gets the display text.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Find(UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Finds the specified browse name.
            </summary>
            <param name="browseName">Name of the browse.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Find(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Finds the specified type id.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browseName">Name of the browse.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Find(UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Finds the specified browse path.
            </summary>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Find(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Finds the specified browse path.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Find(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName[],UnifiedAutomation.UaBase.NodeClass)">
            <summary>
            Finds the match selecting clause.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="nodeClass">The node class.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaClient.TypeFieldDescription)">
            <summary>
            Adds the specified field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaClient.TypeFieldDescription,UnifiedAutomation.UaBase.NumericRange)">
            <summary>
            Adds the specified field.
            </summary>
            <param name="field">The field.</param>
            <param name="indexRange">The index range.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Adds the specified type id.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName[],UnifiedAutomation.UaBase.NumericRange)">
            <summary>
            Adds the specified type id.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="indexRange">The index range.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName[],UnifiedAutomation.UaBase.NodeClass)">
            <summary>
            Adds the specified type id.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="nodeClass">The node class.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Adds the specified browse name.
            </summary>
            <param name="browseName">Name of the browse.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Adds the specified type id.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browseName">Name of the browse.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.NumericRange)">
            <summary>
            Adds the specified type id.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browseName">Name of the browse.</param>
            <param name="indexRange">The index range.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.NodeClass)">
            <summary>
            Adds the specified type id.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browseName">Name of the browse.</param>
            <param name="nodeClass">The node class.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.IndexOf(UnifiedAutomation.UaBase.SimpleAttributeOperand)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Insert(System.Int32,UnifiedAutomation.UaBase.SimpleAttributeOperand)">
             <summary>
             Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
             </summary>
             <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
             <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.RemoveAt(System.Int32)">
             <summary>
             Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
             </summary>
             <param name="index">The zero-based index of the item to remove.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.SimpleAttributeOperand)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Contains(UnifiedAutomation.UaBase.SimpleAttributeOperand)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.CopyTo(UnifiedAutomation.UaBase.SimpleAttributeOperand[],System.Int32)">
             <summary>
             Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
             </summary>
             <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
             <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="array"/> is null.
               </exception>
            
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="arrayIndex"/> is less than 0.
               </exception>
            
             <exception cref="T:System.ArgumentException">
               <paramref name="array"/> is multidimensional.
             -or-
               <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
             -or-
             The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
               </exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Remove(UnifiedAutomation.UaBase.SimpleAttributeOperand)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.GetRemoteId(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Gets the remote id.
            </summary>
            <param name="typeId">The type id.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SelectClauseCollection.Item(System.Int32)">
             <summary>
             Gets or sets the element at the specified index.
             </summary>
             <returns>
             The element at the specified index.
               </returns>
            
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SelectClauseCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SelectClauseCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.WhereClauseCollection">
            <summary>
            A collection of where clauses.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.SelectClauseCollection"/> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.#ctor(UnifiedAutomation.UaBase.StringTable)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.SelectClauseCollection"/> class.
            </summary>
            <param name="namespaceUris">The namespace uris.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.FilterOperator,UnifiedAutomation.UaBase.FilterOperand[])">
            <summary>
            Adds the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="operands">The operands.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.FilterOperator,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Adds the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.FilterOperator,UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Adds the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="typeId">The type id.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.FilterOperator,UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.NumericRange,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Adds the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="typeId">The type id.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="indexRange">The index range.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.FilterOperator,System.Collections.Generic.IEnumerable{UnifiedAutomation.UaBase.QualifiedName},UnifiedAutomation.UaBase.Variant)">
            <summary>
            Adds the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="browsePath">The browse path.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.FilterOperator,UnifiedAutomation.UaBase.ExpandedNodeId,System.Collections.Generic.IEnumerable{UnifiedAutomation.UaBase.QualifiedName},UnifiedAutomation.UaBase.Variant)">
            <summary>
            Adds the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.FilterOperator,UnifiedAutomation.UaBase.ExpandedNodeId,System.Collections.Generic.IEnumerable{UnifiedAutomation.UaBase.QualifiedName},UnifiedAutomation.UaBase.NumericRange,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Adds the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="indexRange">The index range.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.GetRemoteId(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Gets the remote id.
            </summary>
            <param name="typeId">The type id.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaClient.WhereClauseCollection.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.WhereClauseCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:UnifiedAutomation.UaBase.ContentFilterElement"/> at the specified index.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.EventFilterStatus">
            <summary>
            The status for an event filter.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.EventFilterStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaBase.EventFilter"/> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.EventFilterStatus.SelectClauses">
            <summary>
            Gets the status for the select clauses.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.EventFilterStatus.WhereClauses">
            <summary>
            Gets the status for the wheer clauses.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.EventMonitoredItem">
            @ingroup UaClientLibraryHelper
             <summary>
             A data item being monitored.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.EventMonitoredItem.#ctor(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataMonitoredItem"/> class.
            </summary>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.EventMonitoredItem.Initialize">
            <summary>
            Initializes this instance with the default values.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.EventMonitoredItem.Filter">
            <summary>
            Gets the filter.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.EventMonitoredItem.FilterErrors">
            <summary>
            Gets the last error.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.HistoryDataUpdateResult">
            @ingroup UaClientLibraryHelper
             <summary>
             A result for a history data update operation.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryDataUpdateResult.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryDataUpdateResult.OperationResults">
            <summary>
            Gets or sets the results for the individual values.
            </summary>
            <value>
            The results for the individual values.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.UserIdentity">
            @ingroup UaClientLibraryHelper
             <summary>
             A user identity.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.UserIdentity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.UserIdentity"/> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UserIdentity.IdentityType">
            <summary>
            Gets or sets the type of the identity.
            </summary>
            <value>
            The type of the identity.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UserIdentity.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UserIdentity.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UserIdentity.Certificate">
            <summary>
            Gets or sets the certificate.
            </summary>
            <value>
            The certificate.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.UserIdentityType">
            <summary>
            The possible use identity types.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.UserIdentityType.Anonymous">
            <summary>
            No user identity is available.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.UserIdentityType.UserName">
            <summary>
            The user identity is a user name and password.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.UserIdentityType.Certificate">
            <summary>
            The user identity is an X509 certificate.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.UserIdentityType.Kerberos">
            <summary>
            The user identity is integrated windows authentication via Kerberos.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.TraceClientModuleInfo">
            @ingroup UaClientLibraryHelper
             <summary>
             The metadata for the UnifiedAutomation.UaClient trace object.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TraceClientModuleInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.TraceClientModuleInfo"/> class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.TraceClient">
            @ingroup UaClientLibraryHelper
             <summary>
             The trace class used by the UnifiedAutomation.UaClient namespace.
             </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.DataMonitoredItem">
            @ingroup UaClientLibraryHelper
             <summary>
             A data item being monitored.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.#ctor(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataMonitoredItem"/> class.
            </summary>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.#ctor(UnifiedAutomation.UaBase.NodeId,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataMonitoredItem"/> class.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="attributeId">The attribute id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.#ctor(UnifiedAutomation.UaBase.NodeId,System.String,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataMonitoredItem"/> class.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="indexRange">The index range.</param>
            <param name="dataEncoding">The data encoding.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.#ctor(UnifiedAutomation.UaBase.ReadValueId)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataMonitoredItem"/> class.
            </summary>
            <param name="nodeToRead">The node to read.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.#ctor(UnifiedAutomation.UaBase.ReferenceDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataMonitoredItem"/> class.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.#ctor(UnifiedAutomation.UaClient.DataMonitoredItem)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataMonitoredItem"/> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.Initialize">
            <summary>
            Initializes this instance with the default values.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.Save(UnifiedAutomation.UaBase.IEncoder)">
            <summary>
            Saves DataMonitoredItem using the specified encoder.
            </summary>
            <param name="encoder">The encoder.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.Load(UnifiedAutomation.UaBase.IDecoder)">
            <summary>
            Initializes the DataMonitoredItem using the specified decoder.
            </summary>
            <param name="decoder">The decoder.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.IndexRange">
            <summary>
            Gets the index range.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.DataEncoding">
            <summary>
            Gets the data encoding.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.DeadbandType">
            <summary>
            Gets or sets the type of the deadband.
            </summary>
            <value>
            The type of the deadband.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.CurrentDeadbandType">
            <summary>
            Gets the type of the current deadband.
            </summary>
            <value>
            The type of the current deadband.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.Deadband">
            <summary>
            Gets or sets the deadband.
            </summary>
            <value>
            The deadband.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.CurrentDeadband">
            <summary>
            Gets or sets the current deadband.
            </summary>
            <value>
            The current deadband.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.DataChangeTrigger">
            <summary>
            Gets or sets the data change trigger.
            </summary>
            <value>
            The data change trigger.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.CurrentDataChangeTrigger">
            <summary>
            Gets or sets the current data change trigger.
            </summary>
            <value>
            The current data change trigger.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.LastValue">
            <summary>
            Gets the last value.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.PersistentStore">
            @ingroup UaClientLibraryHelper
             <summary>
             The settings to use when saving or restoring data in a persistent store.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.PersistentStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.PersistentStore"/> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.PersistentStore.ServerNamespaceUris">
            <summary>
            Gets or sets the server namespace uris.
            </summary>
            <value>
            The server namespace uris.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.PersistentStore.StorageNamespaceUris">
            <summary>
            Gets or sets the storage namespace uris.
            </summary>
            <value>
            The storage namespace uris.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ModelManager">
            @ingroup UaClientApi
             <summary>
             Provides access to a UA information model using classes with special attributes defined.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.ModelManager"/> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.#ctor(UnifiedAutomation.UaClient.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.ModelManager"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.#ctor(UnifiedAutomation.UaClient.Subscription)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.ModelManager"/> class.
            </summary>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.Read(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.ModelHandle,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Reads the specified model handle.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="handle">The handle.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginRead(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.ModelHandle,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Reads the specified model handle.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="handle">The handle.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.EndRead(System.IAsyncResult)">
            <summary>
            Ends the history read raw.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnReadTranslateComplete(System.IAsyncResult)">
            <summary>
            Called when [read object translate complete].
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnReadReadComplete(System.IAsyncResult)">
            <summary>
            Called when [read object read complete].
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.Write(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.ModelHandle,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Writes the specified root id.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="handle">The handle.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginWrite(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.ModelHandle,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Writes the specified model handle.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="handle">The handle.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.EndWrite(System.IAsyncResult)">
            <summary>
            Ends the write operation.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnWriteTranslateComplete(System.IAsyncResult)">
            <summary>
            Called when [Write object translate complete].
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnWriteWriteComplete(System.IAsyncResult)">
            <summary>
            Called when [Write object Write complete].
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.IsMappedObject(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Determines whether [is mapped object] [the specified type definition id].
            </summary>
            <param name="typeDefinitionId">The type definition id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.CreateMappedObject(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Creates the mapped object.
            </summary>
            <param name="typeDefinitionId">The type definition id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.RegisterMappedObject(UnifiedAutomation.UaBase.NodeId,System.Type)">
            <summary>
            Registers the mapped object.
            </summary>
            <param name="typeDefinitionId">The type definition id.</param>
            <param name="systemType">Type of the system.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.UnregisterMappedObject(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Unregisters the mapped object.
            </summary>
            <param name="typeDefinitionId">The type definition id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.GetTypeDescription(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.TypeDescriptionSelection,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="selection">The selection.</param>
            <param name="settings">The settings.</param>
            <returns>
            The async results.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginGetTypeDescription(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.TypeDescriptionSelection,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="selection">The selection.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns>
            The async results.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.EndGetTypeDescription(System.IAsyncResult)">
            <summary>
            Ends the get method description.
            </summary>
            <param name="result">The result.</param>
            <returns>The method description.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginBrowseSuperTypes(UnifiedAutomation.UaClient.ModelManager.GetTypeDescriptionAsyncResult)">
            <summary>
            Called when an asychronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnBrowseSuperTypesComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.ConstructType(UnifiedAutomation.UaClient.ModelManager.GetTypeDescriptionAsyncResult)">
            <summary>
            Called when an asychronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnBrowseReadTypeAttributesComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginBrowseInstanceDeclarationsForType(UnifiedAutomation.UaClient.ModelManager.GetTypeDescriptionAsyncResult)">
            <summary>
            Called when an asychronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginBrowseInstanceDeclarations(UnifiedAutomation.UaClient.ModelManager.GetTypeDescriptionAsyncResult)">
            <summary>
            Called when an asychronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnBrowseInstanceDeclarationsComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginBrowseModellingRules(UnifiedAutomation.UaClient.ModelManager.GetTypeDescriptionAsyncResult)">
            <summary>
            Called when an asychronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnBrowseModellingRulesComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous read operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.GetMethodDescription(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.GetMethodDescription(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="methodId">The method id.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.GetMethodDescription(UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.IList{UnifiedAutomation.UaBase.QualifiedName},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="objectId">The object id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginGetMethodDescription(UnifiedAutomation.UaBase.NodeId,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="methodId">The method id.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginGetMethodDescription(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="methodId">The method id.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginGetMethodDescription(UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.IList{UnifiedAutomation.UaBase.QualifiedName},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="startingNodeId">The starting node id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns>
            The async results.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.EndGetMethodDescription(System.IAsyncResult)">
            <summary>
            Ends the get method description.
            </summary>
            <param name="result">The result.</param>
            <returns>The method description.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnGetMethodDescriptionsTranslateComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnGetMethodDescriptionsReadComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.GetBrowsePaths(UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.IList{UnifiedAutomation.UaBase.ModelMapping},System.Collections.Generic.IList{UnifiedAutomation.UaBase.StatusCode})">
            <summary>
            Gets the browse paths.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="mappings">The mappings.</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ModelManager.ReadAsyncResult">
             <summary>
            
             </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ModelManager.WriteAsyncResult">
             <summary>
            
             </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ModelManager.GetTypeDescriptionAsyncResult">
            <summary>
            Stores state information for asynchronous read operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ModelManager.GetMethodDescriptionAsyncResult">
            <summary>
            Stores state information for asynchronous read operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session">
            @ingroup UaClientApi
             <summary>
             A class that manages a session with an OPC UA server.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.#ctor">
            <summary>
            Create a session for the default client application.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Create a session for the specified client application.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Connect(System.String,UnifiedAutomation.UaClient.SecuritySelection)">
            <summary>
            Establish a connection to the OPC UA server.</summary>
            <remarks>
             Calling this function successfully creates a secure channel to the server endpoint and it creates and activates an application session in the server application.<para/>
             The SDK is managing the connection to the server by
            - Monitoring the status of the session with read calls to the server status variable. The frequency of the read calls can be controlled with the property WatchdogCycleTime
            - Reconnect on TCP/IP or SecureChannel level if the connection was lost
            - Recreation of the session if the session timed out or the server was restarted
            - The callback ConnectionStatusUpdate provides information about the current status of the session
            </remarks>
            <param name = "endpointUrl"><para>The URL of the server endpoint to connect to.<br/></para>
            <para>UA TCP: opc.tcp://networknode:4840<br/></para>
            <para>WebService: https://networknode/ServerName</para></param>
            <param name="securitySelection">The requested security level. The option None disables security. The option BestAvailable selects the highest security level suported by the server. </param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Connect(System.String,UnifiedAutomation.UaClient.SecuritySelection,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Establish a connection to the OPC UA server.</summary>
            <remarks>
             Calling this function successfully creates a secure channel to the server endpoint and it creates and activates an application session in the server application.<para/>
             The SDK is managing the connection to the server by
            - Monitoring the status of the session with read calls to the server status variable. The frequency of the read calls can be controlled with the property WatchdogCycleTime
            - Reconnect on TCP/IP or SecureChannel level if the connection was lost
            - Recreation of the session if the session timed out or the server was restarted
            - The callback ConnectionStatusUpdate provides information about the current status of the session
            </remarks>
            <param name="endpointUrl"><para>The URL of the server endpoint to connect to.<br/></para>
            <para>UA TCP: opc.tcp://networknode:4840<br/></para>
            <para>WebService: https://networknode/ServerName</para></param>
            <param name="securitySelection">The requested security level. The option None disables security. The option BestAvailable selects the highest security level suported by the server. </param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Connect(System.String,UnifiedAutomation.UaClient.SecuritySelection,System.String,UnifiedAutomation.UaClient.RetryInitialConnect,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Establish a connection to the OPC UA server.</summary>
            <remarks>
             Calling this function successfully creates a secure channel to the server endpoint and it creates and activates an application session in the server application.<para/>
             The SDK is managing the connection to the server by
            - Monitoring the status of the session with read calls to the server status variable. The frequency of the read calls can be controlled with the property WatchdogCycleTime
            - Reconnect on TCP/IP or SecureChannel level if the connection was lost
            - Recreation of the session if the session timed out or the server was restarted
            - The callback ConnectionStatusUpdate provides information about the current status of the session
            </remarks>
            <param name="endpointUrl"><para>The URL of the server endpoint to connect to.<br/></para>
            <para>UA TCP: opc.tcp://networknode:4840<br/></para>
            <para>WebService: https://networknode/ServerName</para></param>
            <param name="securitySelection">The requested security level. The option None disables security. The option BestAvailable selects the highest security level suported by the server. </param>
            <param name="transportProfileUri">The transport profile URI to use (if null the default for the URL scheme is used).</param>
            <param name="retryInitialConnect">Whether to retry a failed connect in the background.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginConnect(System.String,UnifiedAutomation.UaClient.SecuritySelection,System.String,UnifiedAutomation.UaClient.RetryInitialConnect,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously establish a connection to the OPC UA server.</summary>
            <remarks>
             Calling this function successfully creates a secure channel to the server endpoint and it creates and activates an application session in the server application.<para/>
             The SDK is managing the connection to the server by
            - Monitoring the status of the session with read calls to the server status variable. The frequency of the read calls can be controlled with the property WatchdogCycleTime
            - Reconnect on TCP/IP or SecureChannel level if the connection was lost
            - Recreation of the session if the session timed out or the server was restarted
            - The callback ConnectionStatusUpdate provides information about the current status of the session
            </remarks>
            <param name="endpointUrl"><para>The URL of the server endpoint to connect to.<br/></para>
            <para>UA TCP: opc.tcp://networknode:4840<br/></para>
            <para>WebService: https://networknode/ServerName</para></param>
            <param name="securitySelection">The requested security level. The option None disables security. The option BestAvailable selects the highest security level suported by the server.</param>
            <param name="transportProfileUri">The transport profile URI to use (if null the default for the URL scheme is used).</param>
            <param name="retryInitialConnect">Whether to retry a failed connect in the background.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the EndConnect() method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Connect(UnifiedAutomation.UaBase.EndpointDescription,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Establish a connection to the OPC UA server.
            </summary>
            <remarks>
            Connects to the specified endpoint provided by a server or stored in configuration. The available endpoints can be requested through Discovery.GetEndpoints.
            </remarks>
            <param name="endpoint">The full definition of an OPC UA server endpoint.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Connect(UnifiedAutomation.UaBase.EndpointDescription,UnifiedAutomation.UaClient.RetryInitialConnect,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Establish a connection to the OPC UA server.
            </summary>
            <remarks>
            Connects to the specified endpoint provided by a server or stored in configuration. The available endpoints can be requested through Discovery.GetEndpoints.
            </remarks>
            <param name="endpoint">The full definition of an OPC UA server endpoint.</param>
            <param name="retryInitialConnect">Whether to retry a failed connect in the background.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginConnect(UnifiedAutomation.UaBase.EndpointDescription,UnifiedAutomation.UaClient.RetryInitialConnect,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously establish a connection to the OPC UA server.
            </summary>
            <remarks>
            Connects to the specified endpoint provided by a server or stored in configuration. The available endpoints can be requested through Discovery.GetEndpoints
            </remarks>
            <param name="endpoint">The full definition of an OPC UA server endpoint.</param>
            <param name="retryInitialConnect">Whether to retry a failed connect in the background.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the EndConnect() method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndConnect(System.IAsyncResult)">
            <summary>
            Completes an asynchronous connect operation.
            </summary>
            <param name="result">The object returned from the BeginConnect() method.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnGetEndpointsComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous get endpoints operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnCreateSessionComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous create session operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnActivateSessionComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous activate session operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnReadNamespaceArrayComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous call to update the namespace tables completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ReconnectRequired(System.Exception,UnifiedAutomation.UaClient.Session.ConnectAsyncResult)">
            <summary>
            Determines if a reconnect is required.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Disconnect">
            <summary>
            Disconnect client application from OPC UA server.
            </summary>
            <remarks>
            Calling this function closes the session and the secure channel connection to the server. The subscriptions assigned to the session are also deleted.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Disconnect(UnifiedAutomation.UaClient.SubscriptionCleanupPolicy)">
            <summary>
            Disconnect client application from OPC UA server.
            </summary>
            <remarks>
            Calling this function closes the session and the secure channel connection to the server. The subscriptions assigned the session are also deleted if the cleanupPolicy is set to <c>Delete</c>.
            </remarks>
            <param name="cleanupPolicy">The cleanup policy for the subscription. The option <c>Delete</c> removes the subscription together with the session. The subscriptions are not deleted when option <c>Keep</c> is used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Disconnect(UnifiedAutomation.UaClient.SubscriptionCleanupPolicy,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Disconnect client application from OPC UA server.
            </summary>
            <remarks>
            Calling this function closes the session and the secure channel connection to the server. The subscriptions assigned the session are also deleted if the cleanupPolicy is set to <c>Delete</c>.
            </remarks>
            <param name="cleanupPolicy">The cleanup policy for the subscription. The option <c>Delete</c> removes the subscription together with the session. The subscriptions are not deleted when option <c>Keep</c> is used.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously disconnect client application from OPC UA server.
            </summary>
            <remarks>
            Calling this function closes the session and the secure channel connection to the server. The subscriptions assigned to the session are also deleted.
            </remarks>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the EndDisconnect() method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDisconnect(UnifiedAutomation.UaClient.SubscriptionCleanupPolicy,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously disconnect client application from OPC UA server.
            </summary>
            <remarks>
            Calling this function closes the session and the secure channel connection to the server. The subscriptions assigned the session are also deleted if the cleanupPolicy is set to <c>Delete</c>.
            </remarks>
            <param name="cleanupPolicy">The cleanup policy for the subscription. The option <c>Delete</c> removes the subscription together with the session. The subscriptions are not deleted when option <c>Keep</c> is used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the EndDisconnect() method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDisconnect(UnifiedAutomation.UaClient.SubscriptionCleanupPolicy,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously disconnect client application from OPC UA server.
            </summary>
            <remarks>
            Calling this function closes the session and the secure channel connection to the server. The subscriptions assigned the session are also deleted if the cleanupPolicy is set to <c>Delete</c>.
            </remarks>
            <param name="cleanupPolicy">The cleanup policy for the subscription. The option <c>Delete</c> removes the subscription together with the session. The subscriptions are not deleted when option <c>Keep</c> is used.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndDisconnect() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndDisconnect(System.IAsyncResult)">
            <summary>
            Completes an asynchronous disconnect operation.
            </summary>
            <param name="result">The object returned from the \ref BeginDisconnect method.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnCloseSessionComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous close session operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Cancel(System.UInt32,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Cancels all requests with the specified handle.
            </summary>
            <param name="requestHandle">The handle of the request to cancel.</param>
            <param name="settings">The settings.</param>
            <returns>The number of requests that were cancelled.</returns>
            <remarks>
            Using this service requires that the caller explicitly specify a RequestId in the RequestSettings for each request that it thinks it might like to cancel.
            To avoid conflicts with the SDK the request ID should be be less than 1,000,000.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginCancel(System.UInt32,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to cancel a request.
            </summary>
            <param name="requestHandle">The handle of the request to cancel.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns>The async request object.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndCancel(System.IAsyncResult)">
            <summary>
            Completes a cancel operation.
            </summary>
            <param name="result">The result.</param>
            <returns>The number of requests that were cancelled.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnCancelComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous cancel operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Read(System.Collections.Generic.IList{UnifiedAutomation.UaBase.ReadValueId},System.UInt32,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Reads attribute values synchronous from OPC server.
            </summary>
            <remarks>
             The Read Service is used to read one or more attributes of one or more nodes. It allows also reading subsets or single elements of array values and to define a valid age of values to be returned to reduce the need for device reads. Like most other services, the read is optimized for bulk read operations and not for reading single Attribute values. Typically, all Node Attributes are readable. For the Value Attribute, the Read rights are indicated by the AccessLevel and UserAccessLevel Attribute of the Variable.
            </remarks>
            <param name = "nodesToRead">List of nodes and attributes to read. </param>
            <param name = "maxAge">The maximum age of the value to be read in milliseconds.<br/>
            This parameter allows clients to reduce the communication between server and data source by allowing the server to return a cached value that is not older than the defined time period. Setting a value of 0 forces the server to obtain the current value. This is similar to a device read in Classic OPC. </param>
            <param name = "timestampsToReturn">OPC UA defines two timestamps, the source and the server timestamp. This parameter allows the client to define which timestamps the server should return with the value.<br/>
             The source timestamp is only available for Value Attributes. The source timestamp is used to reflect the timestamp that was applied to a Variable value by the data source. It should indicate the last change of the value or status code. The source timestamp must be always generated by the same physical clock. This timestamp type was added for OPC UA to cover the use case to get the timestamp of the last value change which is different than the server timestamp definition.<br/>
             The server timestamp is used to reflect the time that the server received a Variable value or knew it to be accurate if the changes are reported by exception and the connection to the data source is operating. This is the behavior expected by Classic OPC<br/>
             Possible values are
            - TimestampsToReturn.Source
            - TimestampsToReturn.Server
            - TimestampsToReturn.Both </param>
            <param name = "settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns>List of read results. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Read(System.Collections.Generic.IList{UnifiedAutomation.UaBase.ReadValueId})">
            <summary>
            Reads attribute values synchronous from OPC server.
            </summary>
            <remarks>
             The Read Service is used to read one or more attributes of one or more nodes. It allows also reading subsets or single elements of array values and to define a valid age of values to be returned to reduce the need for device reads. Like most other services, the read is optimized for bulk read operations and not for reading single Attribute values. Typically, all Node Attributes are readable. For the Value Attribute, the Read rights are indicated by the AccessLevel and UserAccessLevel Attribute of the Variable.
            </remarks>
            <param name = "nodesToRead">List of nodes and attributes to read. </param>
            <returns>List of read results. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginRead(System.Collections.Generic.IList{UnifiedAutomation.UaBase.ReadValueId},System.UInt32,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Reads values and attributes asynchronously from OPC server.
            <remarks>
            The Read Service is used to read one or more attributes of one or more nodes. It allows also reading subsets or single elements of array values and to define a valid age of values to be returned to reduce the need for device reads. Like most other services, the read is optimized for bulk read operations and not for reading single Attribute values. Typically all Node Attributes are readable. For the Value Attribute the Read rights are indicated by the AccessLevel and UserAccessLevel Attribute of the Variable.
            </remarks>
            </summary>
            <param name="nodesToRead">List of nodes and attributes to read.</param>
            <param name="maxAge">The maximum age for any value.</param>
            <param name = "timestampsToReturn">OPC UA defines two timestamps, the source and the server timestamp. This parameter allows the client to define which timestamps the server should return with the value.<br/>
             The source timestamp is only available for Value Attributes. The source timestamp is used to reflect the timestamp that was applied to a Variable value by the data source. It should indicate the last change of the value or status code. The source timestamp must be always generated by the same physical clock. This timestamp type was added for OPC UA to cover the use case to get the timestamp of the last value change which is different than the server timestamp definition.<br/>
             The server timestamp is used to reflect the time that the server received a Variable value or knew it to be accurate if the changes are reported by exception and the connection to the data source is operating. This is the behavior expected by Classic OPC<br/>
             Possible values are
            - TimestampsToReturn.Source
            - TimestampsToReturn.Server
            - TimestampsToReturn.Both </param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the EndRead() method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginRead(System.Collections.Generic.IList{UnifiedAutomation.UaBase.ReadValueId},System.UInt32,UnifiedAutomation.UaBase.TimestampsToReturn,System.AsyncCallback,System.Object)">
            <summary>
            This is an overloaded function. See \ref BeginRead for more details.
            </summary>
            <param name="nodesToRead">The nodes to read.</param>
            <param name="maxAge">The max age.</param>
            <param name="timestampsToReturn">The timestamps to return.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndRead() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginRead(System.Collections.Generic.IList{UnifiedAutomation.UaBase.ReadValueId},System.UInt32,System.AsyncCallback,System.Object)">
            <summary>
            This is an overloaded function. See \ref BeginRead for more details.
            </summary>
            <param name="nodesToRead">The nodes to read.</param>
            <param name="maxAge">The max age.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndRead() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndRead(System.IAsyncResult)">
            <summary>
            Completes an asynchronous read operation.
            </summary>
            <param name="result">The object returned from the \ref BeginRead method.</param>
            <returns>List of read results.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginRead(UnifiedAutomation.UaClient.Session.ReadAsyncResult)">
            <summary>
            Begins the read.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnReadComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Write(System.Collections.Generic.IList{UnifiedAutomation.UaBase.WriteValue},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Writes attributes synchronously to OPC server.
            </summary>
            <remarks>
            The Write Service is used to write one or more attributes of one or more nodes.
            For the Value Attribute the Write rights are indicated by the AccessLevel and UserAccessLevel Attribute of the Variable.
            </remarks>
            <param name="nodesToWrite">List of nodes and attributes to write.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns>A list of StatusCodes that indicate for each node if the write operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Write(System.Collections.Generic.IList{UnifiedAutomation.UaBase.WriteValue})">
            <summary>
            Writes attributes synchronously to OPC server.
            </summary>
            <remarks>
            The Write Service is used to write one or more attributes of one or more nodes.
            For the Value Attribute the Write rights are indicated by the AccessLevel and UserAccessLevel Attribute of the Variable.
            </remarks>
            <param name="nodesToWrite">The nodes to write.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginWrite(System.Collections.Generic.IList{UnifiedAutomation.UaBase.WriteValue},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Writes attributes asynchronously to a OPC UA server.
            </summary>
            <remarks>
            The Write Service is used to write one or more attributes of one or more nodes.
            For the Value Attribute the Write rights are indicated by the AccessLevel and UserAccessLevel Attribute of the Variable.
            </remarks>
            <param name="nodesToWrite">List of nodes and attributes to write.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndWrite() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginWrite(System.Collections.Generic.IList{UnifiedAutomation.UaBase.WriteValue},System.AsyncCallback,System.Object)">
            <summary>
            This is an overloaded function. See \ref BeginWrite for more details.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="result">The result returned from \ref BeginWrite method.</param>
            <returns>A list of StatusCodes that indicates for each node if the write operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginWrite(UnifiedAutomation.UaClient.Session.WriteAsyncResult)">
            <summary>
            Begins the write.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnWriteComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous write operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ChangeUser">
            <summary>
            Change user for the connection to the OPC UA server.
            </summary>
            <remarks>
            Calling this function changes the user of the session by calling ActivateSession with the new user identity.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ChangeUser(UnifiedAutomation.UaClient.UserIdentity)">
            <summary>
            Change user for the connection to the OPC UA server.
            </summary>
            <remarks>
            Calling this function changes the user of the session by calling ActivateSession with the new user identity.
            </remarks>
            <param name="userIdentity">The user identity.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ChangeUser(UnifiedAutomation.UaClient.UserIdentity,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Change user for the connection to the OPC UA server.
            </summary>
            <remarks>
            Calling this function changes the user of the session by calling ActivateSession with the new user identity.
            </remarks>
            <param name="userIdentity">The user identity.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginChangeUser(System.AsyncCallback,System.Object)">
            <summary>
            Change user for the connection to the OPC UA server asynchronously.
            </summary>
            <param name = "callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndChangeUser method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginChangeUser(UnifiedAutomation.UaClient.UserIdentity,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Change user for the connection to the OPC UA server asynchronously.
            </summary>
            <param name="userIdentity">The user identity.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndChangeUser method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndChangeUser(System.IAsyncResult)">
            <summary>
            Completes an asynchronous change user request.
            </summary>
            <param name="result">The result returned from \ref BeginChangeUser method</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnChangeUserComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous change user operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Browse(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.BrowseContext,UnifiedAutomation.UaClient.RequestSettings,System.Byte[]@)">
            <summary>
            Browse OPC server address space with one starting node.
            </summary>
            <remarks> The Browse Service is used by a client to navigate through the Address Space by passing a starting Node and browse filters. The server returns the list of referenced nodes matching the filter criteria.<para/>
             The Browse Service takes a list of starting Nodes and returns a list of connected Nodes for each starting Node. Nevertheless, most clients will only pass one starting Node for the main purpose of building a tree hierarchy. Since the OPC UA Address Space can be a full-meshed network and is not limited to a pure hierarchy, the capability to pass in a list of starting Nodes is mainly used to browse metadata like the Properties of a list of Variables. The client SDK provides different browse methods, one for a single starting Node and one for a list of starting Nodes.<para/>
             This simplified browse method is used for a single starting node.
            </remarks>
            <param name = "nodeToBrowse">NodeId of the starting Node </param>
            <param name = "browseContext">Filter settings for the browse call. See BrowseContext for more details.</param>
            <param name = "settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name = "continuationPoint">out: A continuation point is returned when the server was not able to deliver all results in the Browse response. The limitation can be set by the client in the request or by the server during Browse processing. The continuation point can be passed to browseNext to get the remaining results.</param>
            <returns>List of references and target Node information for the Nodes passing the filter criteria set in the request. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Browse(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.BrowseContext,System.Byte[]@)">
            <summary>
            This is an overloaded function. See \ref Browse for more details.
            </summary>
            <param name="nodeToBrowse">The node to browse.</param>
            <param name="browseContext">The browse context.</param>
            <param name="continuationPoint">The continuation point.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Browse(UnifiedAutomation.UaBase.NodeId,System.Byte[]@)">
            <summary>
            This is an overloaded function. See \ref Browse for more details.
            </summary>
            <param name="nodeToBrowse">The node to browse.</param>
            <param name="continuationPoint">The continuation point.</param>
            <remarks>
            This method returns only forward hierarchial references.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginBrowse(UnifiedAutomation.UaBase.NodeId,System.AsyncCallback,System.Object)">
            <summary>
            Browse OPC server address space with one starting node asnchonously.
            </summary>
            <remarks>
            The Browse Service is used by a client to navigate through the Address Space by passing a starting Node and browse filters. The server returns the list of referenced nodes matching the filter criteria.<para/>
             The Browse Service takes a list of starting Nodes and returns a list of connected Nodes for each starting Node. Nevertheless, most clients will only pass one starting Node for the main purpose of building a tree hierarchy. Since the OPC UA Address Space can be a full-meshed network and is not limited to a pure hierarchy, the capability to pass in a list of starting Nodes is mainly used to browse metadata like the Properties of a list of Variables. The client SDK provides different browse methods, one for a single starting Node and one for a list of starting Nodes.<para/>
            This simplified browse method is used for a single starting node.
            </remarks>
            <param name="nodeToBrowse">The node to browse.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <remarks>
            This method returns only forward hierarchial references.
            </remarks>
            <returns>An object which must be passed to the \ref EndBrowse method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginBrowse(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.BrowseContext,System.AsyncCallback,System.Object)">
            <summary>
            This is an overloaded function. See \ref BeginBrowse for more details.
            </summary>
            <param name="nodeToBrowse">The node to browse.</param>
            <param name="browseContext">The browse context.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndBrowse method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginBrowse(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.BrowseContext,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            This is an overloaded function. See \ref BeginBrowse for more details.
            </summary>
            <param name="nodeToBrowse">The node to browse.</param>
            <param name="browseContext">The browse context.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndBrowse method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndBrowse(System.IAsyncResult,System.Byte[]@)">
            <summary>
            Completes an ansynchronous browse operation.
            </summary>
            <param name="result">The object returned from the \ref BeginBrowse method.</param>
            <param name="continuationPoint">The continuation point.</param>
            <returns>List of references and target Node information for the Nodes passing the filter criteria set in the request. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnBrowseComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous browse operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BrowseNext(System.Byte[]@)">
            <summary>
            Continues a previous Browse request.
            </summary>
            <remarks>
            This method is only used to continue a browse started with the browse method if not all results could be returned by the browse or a following browseNext call. The number of Nodes to return can be limited by the client in the browse request or by the Server during processing the Browse Service call.
            </remarks>
            <param name="continuationPoint">Continuation points returned from a previous browse or browseNext call. A continuation point is returned when the server was not able to deliver all results in the BrowseNext response. The limitation can be set by the client in the browse or by the server during processing the Browse Service call.</param>
            <returns>List of references and target Node information for the Nodes passing the filter criteria set in the request. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BrowseNext(UnifiedAutomation.UaClient.RequestSettings,System.Byte[]@)">
            <summary>
            Continues a previous Browse request.
            </summary>
            <remarks>
            This method is only used to continue a browse started with the browse method if not all results could be returned by the browse or a following browseNext call. The number of Nodes to return can be limited by the client in the browse request or by the Server during processing the Browse Service call.
            </remarks>
            <param name = "settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name = "continuationPoint">Continuation points returned from a previous browse or browseNext call. A continuation point is returned when the server was not able to deliver all results in the BrowseNext response. The limitation can be set by the client in the browse or by the server during processing the Browse Service call.</param>
            <returns>List of references and target Node information for the Nodes passing the filter criteria set in the first browse call </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginBrowseNext(System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Continues a previous Browse request asynchronously.
            </summary>
            <remarks>
            This method is only used to continue a browse started with the browse method if not all results could be returned by the browse or a following browseNext call. The number of Nodes to return can be limited by the client in the browse request or by the Server during processing the Browse Service call.
            </remarks>
            <param name="continuationPoint">Continuation points returned from a previous browse or browseNext call. A continuation point is returned when the server was not able to deliver all results in the BrowseNext response. The limitation can be set by the client in the browse or by the server during processing the Browse Service call.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndBrowse method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginBrowseNext(System.Byte[],UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Continues a previous Browse request asynchronously.
            </summary>
            <remarks>
            This method is only used to continue a browse started with the browse method if not all results could be returned by the browse or a following browseNext call. The number of Nodes to return can be limited by the client in the browse request or by the Server during processing the Browse Service call.
            </remarks>
            <param name="continuationPoint">Continuation points returned from a previous browse or browseNext call. A continuation point is returned when the server was not able to deliver all results in the BrowseNext response. The limitation can be set by the client in the browse or by the server during processing the Browse Service call.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndBrowse method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnBrowseNextComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous browse next operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BrowseList(System.Collections.Generic.List{UnifiedAutomation.UaBase.BrowseDescription})">
            <summary>
            Browse OPC server address space with a list of starting nodes.
            </summary>
            <remarks>
            The Browse Service is used by a client to navigate through the Address Space by passing a starting Node and browse filters. The server returns the list of referenced nodes matching the filter criteria.<para/>
            The Browse Service takes a list of starting Nodes and returns a list of connected Nodes for each starting Node. Nevertheless, most clients will only pass one starting Node for the main purpose of building a tree hierarchy. Since the OPC UA Address Space can be a full-meshed network and is not limited to a pure hierarchy, the capability to pass in a list of starting Nodes is mainly used to browse metadata like the Properties of a list of Variables. The client SDK provides different browse methods, one for a single starting Node and one for a list of starting Nodes.<para/>
            This browse method is used for a list of starting nodes.
            </remarks>
            <param name="nodesToBrowse">The nodes to browse.</param>
            <returns>List of references and target Node information for the Nodes passing the filter criteria set in the request.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BrowseList(UnifiedAutomation.UaBase.ViewDescription,System.Collections.Generic.List{UnifiedAutomation.UaBase.BrowseDescription},System.UInt32,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Browse OPC server address space with a list of starting nodes.
            </summary>
            <remarks>
            The Browse Service is used by a client to navigate through the Address Space by passing a starting Node and browse filters. The server returns the list of referenced nodes matching the filter criteria.<para/>
            The Browse Service takes a list of starting Nodes and returns a list of connected Nodes for each starting Node. Nevertheless, most clients will only pass one starting Node for the main purpose of building a tree hierarchy. Since the OPC UA Address Space can be a full-meshed network and is not limited to a pure hierarchy, the capability to pass in a list of starting Nodes is mainly used to browse metadata like the Properties of a list of Variables. The client SDK provides different browse methods, one for a single starting Node and one for a list of starting Nodes.<para/>
            This browse method is used for a list of starting nodes.
            </remarks>
            <param name="view">The view.</param>
            <param name="nodesToBrowse">The nodes to browse.</param>
            <param name="maxReferencesPerBrowse">The maximum number of references per browse.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns>List of references and target Node information for the Nodes passing the filter criteria set in the request. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginBrowseList(System.Collections.Generic.List{UnifiedAutomation.UaBase.BrowseDescription},System.AsyncCallback,System.Object)">
            <summary>
            Browse OPC server address space with a list of starting nodes asnchonously.
            </summary>
            <remarks>
            The Browse Service is used by a client to navigate through the Address Space by passing a starting Node and browse filters. The server returns the list of referenced nodes matching the filter criteria.<para/>
            The Browse Service takes a list of starting Nodes and returns a list of connected Nodes for each starting Node. Nevertheless, most clients will only pass one starting Node for the main purpose of building a tree hierarchy. Since the OPC UA Address Space can be a full-meshed network and is not limited to a pure hierarchy, the capability to pass in a list of starting Nodes is mainly used to browse metadata like the Properties of a list of Variables. The client SDK provides different browse methods, one for a single starting Node and one for a list of starting Nodes.<para/>
            This browse method is used for a list of starting nodes.
            </remarks>
            <param name="nodesToBrowse">The nodes to browse.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndBrowseList method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginBrowseList(UnifiedAutomation.UaBase.ViewDescription,System.Collections.Generic.List{UnifiedAutomation.UaBase.BrowseDescription},System.UInt32,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Browse OPC server address space with a list of starting nodes asnchonously.
            </summary>
            <remarks>
            The Browse Service is used by a client to navigate through the Address Space by passing a starting Node and browse filters. The server returns the list of referenced nodes matching the filter criteria.<para/>
            The Browse Service takes a list of starting Nodes and returns a list of connected Nodes for each starting Node. Nevertheless, most clients will only pass one starting Node for the main purpose of building a tree hierarchy. Since the OPC UA Address Space can be a full-meshed network and is not limited to a pure hierarchy, the capability to pass in a list of starting Nodes is mainly used to browse metadata like the Properties of a list of Variables. The client SDK provides different browse methods, one for a single starting Node and one for a list of starting Nodes.<para/>
            This browse method is used for a list of starting nodes.
            </remarks>
            <param name="view">The view.</param>
            <param name="nodesToBrowse">The nodes to browse.</param>
            <param name="maxReferencesPerBrowse">The maximum number of references per browse.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndBrowseList method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndBrowseList(System.IAsyncResult)">
            <summary>
            Completes an ansynchronous browse list operation.
            </summary>
            <param name="result">The object returned from the \ref BeginBrowseList method.</param>
            <returns>List of references and target Node information for the Nodes passing the filter criteria set in the request.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnBrowseListComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous browse operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ReleaseBrowseContinuationPoint(System.Byte[])">
            <summary>
            Releases the browse continuation point.
            </summary>
            <param name="continuationPoint">The continuation point.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ReleaseBrowseContinuationPoint(System.Byte[],UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Releases the browse continuation point.
            </summary>
            <param name="continuationPoint">The continuation point.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginReleaseBrowseContinuationPoint(System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Begins a release browse continuation point operation.
            </summary>
            <param name="continuationPoint">The continuation point.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndReleaseBrowseContinuationPoint method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginReleaseBrowseContinuationPoint(System.Byte[],UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a release browse continuation point operation.
            </summary>
            <param name="continuationPoint">The continuation point.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndReleaseBrowseContinuationPoint method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndReleaseBrowseContinuationPoint(System.IAsyncResult)">
            <summary>
            Ends an asynchronous release browse continuation point operation.
            </summary>
            <param name="result">The object returned from the \ref BeginReleaseBrowseContinuationPoint method.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.TranslateBrowsePath(System.Collections.Generic.IList{UnifiedAutomation.UaBase.BrowsePath})">
            <summary>
            Translate a browse path to a NodeId.
            </summary>
            <remarks>
             This Service is used to access components of an Object based on the knowledge about the ObjectType. Since the NodeId of a Node is needed to access information provided by the Node like subscribing for Variable Value changes or to call a Method, it is necessary to know the NodeIds of components of Objects. Since OPC UA allows programming software components with built-in knowledge of ObjectTypes, UA needs to provide a mechanism to return the NodeIds for components of an Object instance based on the knowledge about the ObjectType. This mechanism is built on the requirement that the BrowseNames of components in the instance must be the same like BrowseNames of components in the type.
            </remarks>
            <param name = "pathsToTranslate">The list of browse paths for which NodeIds are requested</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.TranslateBrowsePath(System.Collections.Generic.IList{UnifiedAutomation.UaBase.BrowsePath},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Translate a browse path to a NodeId.
            </summary>
            <remarks>
             This Service is used to access components of an Object based on the knowledge about the ObjectType. Since the NodeId of a Node is needed to access information provided by the Node like subscribing for Variable Value changes or to call a Method, it is necessary to know the NodeIds of components of Objects. Since OPC UA allows programming software components with built-in knowledge of ObjectTypes, UA needs to provide a mechanism to return the NodeIds for components of an Object instance based on the knowledge about the ObjectType. This mechanism is built on the requirement that the BrowseNames of components in the instance must be the same like BrowseNames of components in the type.
            </remarks>
            <param name="pathsToTranslate">The list of browse paths for which NodeIds are requested</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.TranslateBrowsePath(UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.IList{System.String})">
            <summary>
            Translates the browse paths.
            </summary>
            <param name="startingNodeId">The starting node.</param>
            <param name="browsePaths">A list of browse paths to translate.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.TranslateBrowsePath(UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.IList{System.String},UnifiedAutomation.UaBase.NamespaceTable,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Translates the browse paths.
            </summary>
            <param name="startingNodeId">The starting node.</param>
            <param name="browsePaths">A list of browse paths to translate.</param>
            <param name="namespaceUris">The table of namespaces referenced by the browse paths (if null the session namespace table is assumed).</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginTranslateBrowsePath(System.Collections.Generic.IList{UnifiedAutomation.UaBase.BrowsePath},System.AsyncCallback,System.Object)">
            <summary>
            Begins a translate browse paths operation.
            </summary>
            <param name="pathsToTranslate">The paths to translate.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndTranslateBrowsePath method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginTranslateBrowsePath(UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.IList{System.String},System.AsyncCallback,System.Object)">
            <summary>
            Begins a translate browse paths operation.
            </summary>
            <param name="startingNodeId">The starting node.</param>
            <param name="browsePaths">A list of browse paths to translate.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndTranslateBrowsePath method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginTranslateBrowsePath(UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.IList{System.String},UnifiedAutomation.UaBase.NamespaceTable,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a translate browse paths operation.
            </summary>
            <param name="startingNodeId">The starting node.</param>
            <param name="browsePaths">A list of browse paths to translate.</param>
            <param name="namespaceUris">The table of namespace referenced by the browse paths (if null the session namespace table is assumed).</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndTranslateBrowsePath method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginTranslateBrowsePath(System.Collections.Generic.IList{UnifiedAutomation.UaBase.BrowsePath},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a translate browse paths operation.
            </summary>
            <param name="pathsToTranslate">The paths to translate.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndTranslateBrowsePath method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndTranslateBrowsePath(System.IAsyncResult)">
            <summary>
            Ends an asynchronous translate browse path operation.
            </summary>
            <param name="result">The object returned from the \ref BeginTranslateBrowsePath method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginTranslateBrowsePath(UnifiedAutomation.UaClient.Session.TranslateBrowsePathAsyncResult)">
            <summary>
            Begins the read.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnTranslateBrowsePathComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Call(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Calls a method of an Object in the OPC server
            </summary>
            <param name="objectToCall">The object to call.</param>
            <param name="methodToCall">The method to call.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Call(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode}@,System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant}@)">
            <summary>
            Calls the specified method.
            </summary>
            <param name="objectToCall">The object to call.</param>
            <param name="methodToCall">The method to call.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentErrors">The input argument errors.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Call(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant},UnifiedAutomation.UaClient.RequestSettings,System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode}@,System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant}@)">
            <summary>
            Calls the specified method.
            </summary>
            <param name="objectToCall">The object to call.</param>
            <param name="methodToCall">The method to call.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="inputArgumentErrors">The input argument errors.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginCall(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously calls the specified method.
            </summary>
            <param name="objectToCall">The object to call.</param>
            <param name="methodToCall">The method to call.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndCall method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndCall(System.IAsyncResult)">
            <summary>
            Completes an asynchronous Call operation.
            </summary>
            <param name="result">The object returned from the \ref BeginCall method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndCall(System.IAsyncResult,System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode}@,System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant}@)">
            <summary>
            Completes an asynchronous Call operation.
            </summary>
            <param name="result">The object returned from the \ref BeginCall method.</param>
            <param name="inputArgumentErrors">The input argument errors.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.CallList(System.Collections.Generic.IList{UnifiedAutomation.UaBase.CallMethodRequest},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Calls the specified methods to call.
            </summary>
            <param name="methodsToCall">The methods to call.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginCallList(System.Collections.Generic.IList{UnifiedAutomation.UaBase.CallMethodRequest},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously calls the specified methods.
            </summary>
            <param name="methodsToCall">The methods to call.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndCallList method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndCallList(System.IAsyncResult)">
            <summary>
            Completes an asynchronous request to call a list of methods.
            </summary>
            <param name="result">The object returned from the \ref BeginCallList method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginCallList(UnifiedAutomation.UaClient.Session.CallListAsyncResult)">
            <summary>
            Begins the read.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnCallListComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous browse operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadRaw(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails)">
            <summary>
            Reads the history of variable values synchronously from OPC server.
            </summary>
            <remarks>
            This method is used to read raw historical values of one or more nodes in an ordered sequence for the defined time domain. Continuation points are used to continue the read of the ordered sequence if not all data can be returned in one read. The returned number can be limited by the client or the server.
            See \ref ReleaseHistoryContinuationPoints for cleaning up resources in the server if read should not be continued with the returned continuation point.
            </remarks>
            <param name="nodesToRead">List of variable nodes to read data history from. Includes a continuation point to continue previous read requests.</param>
            <param name="details">Configuration parameters for the history read of raw data.
            Configuration parameters include
            - The start time of the requested time interval
            - The end time of the requested time interval
            - Setting if bounding values should be returned
            - Limitation of the number of results per node
            </param>
            <returns>Result data for the requested nodes and time interval. A continuation point is included for a node if not all results could be returned.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadRaw(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Reads the history of variable values synchronously from OPC server.
            </summary>
            <remarks>
            This method is used to read raw historical values of one or more nodes in an ordered sequence for the defined time domain. Continuation points are used to continue the read of the ordered sequence if not all data can be returned in one read. The returned number can be limited by the client or the server.
            See \ref ReleaseHistoryContinuationPoints for cleaning up resources in the server if read should not be continued with the returned continuation point.
            </remarks>
            <param name="nodesToRead">List of variable nodes to read data history from. Includes a continuation point to continue previous read requests.</param>
            <param name="details">Configuration parameters for the history read of raw data.
            Configuration parameters include
            - The start time of the requested time interval
            - The end time of the requested time interval
            - Setting if bounding values should be returned
            - Limitation of the number of results per node
            </param>
            <param name="timestampsToReturn">Enumeration for the timestamps to return with the values. Possible values are source, server or both. The option neither is invalid for history read.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns>Result data for the requested nodes and time interval. A continuation point is included for a node if not all results could be returned.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadRaw(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails,System.AsyncCallback,System.Object)">
            <summary>
            Reads the history of variable values asynchronously from OPC server.
            </summary>
            <remarks>
            This method is used to read raw historical values of one or more nodes in an ordered sequence for the defined time domain. Continuation points are used to continue the read of the ordered sequence if not all data can be returned in one read. The returned number can be limited by the client or the server.
            See \ref ReleaseHistoryContinuationPoints for cleaning up resources in the server if read should not be continued with the returned continuation point.
            </remarks>
            <param name="nodesToRead">List of variable nodes to read data history from. Includes a continuation point to continue previous read requests.</param>
            <param name="details">Configuration parameters for the history read of raw data.
            Configuration parameters include
            - The start time of the requested time interval
            - The end time of the requested time interval
            - Setting if bounding values should be returned
            - Limitation of the number of results per node
            </param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndHistoryReadRaw() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadRaw(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Reads the history of variable values asynchronously from OPC server.
            </summary>
            <remarks>
            This method is used to read raw historical values of one or more nodes in an ordered sequence for the defined time domain. Continuation points are used to continue the read of the ordered sequence if not all data can be returned in one read. The returned number can be limited by the client or the server.
            See \ref ReleaseHistoryContinuationPoints for cleaning up resources in the server if read should not be continued with the returned continuation point.
            </remarks>
            <param name="nodesToRead">List of variable nodes to read data history from. Includes a continuation point to continue previous read requests.</param>
            <param name="details">Configuration parameters for the history read of raw data.
            Configuration parameters include
            - The start time of the requested time interval
            - The end time of the requested time interval
            - Setting if bounding values should be returned
            - Limitation of the number of results per node
            </param>
            <param name="timestampsToReturn">Enumeration for the timestamps to return with the values. Possible values are source, server or both. The option neither is invalid for history read.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndHistoryReadRaw() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryReadRaw(System.IAsyncResult)">
            <summary>
            Completes an asynchronous HistoryReadRaw operation.
            </summary>
            <param name="result">The object returned from the \ref BeginHistoryReadRaw method.</param>
            <returns>Result data for the requested nodes and time interval. A continuation point is included for a node if not all results could be returned.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadModified(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails)">
            <summary>
            Reads the history of modified variable values synchronously from the OPC server.
            </summary>
            <remarks>
            This method is used to read modified historical values of one or more nodes in an ordered sequence for the defined time domain. Continuation points are used to continue the read of the ordered sequence if not all data can be returned in one read. The returned number can be limited by the client or the server.
            See \ref ReleaseHistoryContinuationPoints for cleaning up resources in the server if read should not be continued with the returned continuation point.
            </remarks>
            <param name="nodesToRead">List of variable nodes to read modified data history from. Includes a continuation point to continue previous read requests.</param>
            <param name="details">Configuration parameters for the history read of modified data.
            Configuration parameters include
            - The start time of the requested time interval
            - The end time of the requested time interval
            - Setting if bounding values should be returned
            - Limitation of the number of results per node
            </param>
            <returns>Result data for the requested nodes and time interval. A continuation point is included for a node if not all results could be returned.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadModified(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Reads the history of modified variable values synchronously from the OPC server.
            </summary>
            <remarks>
            This method is used to read modified historical values of one or more nodes in an ordered sequence for the defined time domain. Continuation points are used to continue the read of the ordered sequence if not all data can be returned in one read. The returned number can be limited by the client or the server.
            See \ref ReleaseHistoryContinuationPoints for cleaning up resources in the server if read should not be continued with the returned continuation point.
            </remarks>
            <param name="nodesToRead">List of variable nodes to read modified data history from. Includes a continuation point to continue previous read requests.</param>
            <param name="details">Configuration parameters for the history read of modified data.
            Configuration parameters include
            - The start time of the requested time interval
            - The end time of the requested time interval
            - Setting if bounding values should be returned
            - Limitation of the number of results per node
            </param>
            <param name="timestampsToReturn">Enumeration for the timestamps to return with the values. Possible values are source, server or both. The option neither is invalid for history read.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns>Result data for the requested nodes and time interval. A continuation point is included for a node if not all results could be returned.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadModified(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails,System.AsyncCallback,System.Object)">
            <summary>
            Reads the history of modified variable values asynchronously from the OPC server.
            </summary>
            <remarks>
            This method is used to read modified historical values of one or more nodes in an ordered sequence for the defined time domain. Continuation points are used to continue the read of the ordered sequence if not all data can be returned in one read. The returned number can be limited by the client or the server.
            See \ref ReleaseHistoryContinuationPoints for cleaning up resources in the server if read should not be continued with the returned continuation point.
            </remarks>
            <param name="nodesToRead">List of variable nodes to read modified data history from. Includes a continuation point to continue previous read requests.</param>
            <param name="details">Configuration parameters for the history read of modified data.
            Configuration parameters include
            - The start time of the requested time interval
            - The end time of the requested time interval
            - Setting if bounding values should be returned
            - Limitation of the number of results per node
            </param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndHistoryReadModified() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadModified(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Reads the history of modified variable values asynchronously from the OPC server.
            </summary>
            <remarks>
            This method is used to read modified historical values of one or more nodes in an ordered sequence for the defined time domain. Continuation points are used to continue the read of the ordered sequence if not all data can be returned in one read. The returned number can be limited by the client or the server.
            See \ref ReleaseHistoryContinuationPoints for cleaning up resources in the server if read should not be continued with the returned continuation point.
            </remarks>
            <param name="nodesToRead">List of variable nodes to read modified data history from. Includes a continuation point to continue previous read requests.</param>
            <param name="details">Configuration parameters for the history read of modified data.
            Configuration parameters include
            - The start time of the requested time interval
            - The end time of the requested time interval
            - Setting if bounding values should be returned
            - Limitation of the number of results per node
            </param>
            <param name="timestampsToReturn">Enumeration for the timestamps to return with the values. Possible values are source, server or both. The option neither is invalid for history read.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndHistoryReadModified() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryReadModified(System.IAsyncResult)">
            <summary>
            Completes an asynchronous HistoryReadModified operation.
            </summary>
            <param name="result">The object returned from the \ref BeginHistoryReadModified method.</param>
            <returns>Result data for the requested nodes and time interval. A continuation point is included for a node if not all results could be returned.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadProcessed(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadProcessedDetails)">
             <summary>
             Reads the processed history of variable values synchronously from the OPC server based on a passed aggregate.
             </summary>
             <remarks>
             This method is used to read processed historical values of one or more nodes in an ordered sequence for the defined time domain.
             Continuation points are used to continue the read of the ordered sequence if not all data can be returned in one read or if the
             server was not able to finish the processing before the timeout expired. The returned number can be limited by the server and
             may be 0 if the server was not able to finish one calculation before the service timeout expired.
             See \ref ReleaseHistoryContinuationPoints for cleaning up resources in the server if read should not be continued with the returned continuation point.
            
             The processed values are calculated with the specified aggregate based on the raw data in the history database. The server must
             use start time, end time, and the resample interval to generate a sequence of time intervals and then calculate an aggregate for each interval.
             </remarks>
             <param name="nodesToRead">List of variable nodes to read processed data history from. Includes a continuation point to continue previous read requests.</param>
             <param name="details">Configuration parameters for the history read of processed data.
             Configuration parameters include
             - The start time of the requested time domain
             - The end time of the requested time domain
             - Time processing interval used to calculate one aggregated value from the raw values
             - The NodeId of the aggregate used for the calculation of the values
             </param>
             <returns>Result data for the requested nodes, time domain and aggregates. A continuation point is included for a node if not all results could be returned or processed before the timeout expired.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadProcessed(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadProcessedDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings)">
             <summary>
             Reads the processed history of variable values synchronously from the OPC server based on a passed aggregate.
             </summary>
             <remarks>
             This method is used to read processed historical values of one or more nodes in an ordered sequence for the defined time domain.
             Continuation points are used to continue the read of the ordered sequence if not all data can be returned in one read or if the
             server was not able to finish the processing before the timeout expired. The returned number can be limited by the server and
             may be 0 if the server was not able to finish one calculation before the service timeout expired.
             See \ref ReleaseHistoryContinuationPoints for cleaning up resources in the server if read should not be continued with the returned continuation point.
            
             The processed values are calculated with the specified aggregate based on the raw data in the history database. The server must
             use start time, end time, and the resample interval to generate a sequence of time intervals and then calculate an aggregate for each interval.
             </remarks>
             <param name="nodesToRead">List of variable nodes to read processed data history from. Includes a continuation point to continue previous read requests.</param>
             <param name="details">Configuration parameters for the history read of processed data.
             Configuration parameters include
             - The start time of the requested time domain
             - The end time of the requested time domain
             - Time processing interval used to calculate one aggregated value from the raw values
             - The NodeId of the aggregate used for the calculation of the values
             </param>
             <param name="timestampsToReturn">The timestamps to return.</param>
             <param name="settings">The general settings for the request. If
             null, the default settings from the property \ref DefaultRequestSettings are used.</param>
             <returns>Result data for the requested nodes, time domain and aggregates. A continuation point is included for a node if not all results could be returned or processed before the timeout expired.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadProcessed(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadProcessedDetails,System.AsyncCallback,System.Object)">
             <summary>
             Reads the processed history of variable values asynchronously from the OPC server based on a passed aggregate.
             </summary>
             <remarks>
             This method is used to read processed historical values of one or more nodes in an ordered sequence for the defined time domain.
             Continuation points are used to continue the read of the ordered sequence if not all data can be returned in one read or if the
             server was not able to finish the processing before the timeout expired. The returned number can be limited by the server and
             may be 0 if the server was not able to finish one calculation before the service timeout expired.
             See \ref ReleaseHistoryContinuationPoints for cleaning up resources in the server if read should not be continued with the returned continuation point.
            
             The processed values are calculated with the specified aggregate based on the raw data in the history database. The server must
             use start time, end time, and the resample interval to generate a sequence of time intervals and then calculate an aggregate for each interval.
             </remarks>
             <param name="nodesToRead">List of variable nodes to read processed data history from. Includes a continuation point to continue previous read requests.</param>
             <param name="details">Configuration parameters for the history read of processed data.
             Configuration parameters include
             - The start time of the requested time domain
             - The end time of the requested time domain
             - Time processing interval used to calculate one aggregated value from the raw values
             - The NodeId of the aggregate used for the calculation of the values
             </param>
             <param name="callback">The callback to use when the async call completes.</param>
             <param name="userData">The user data that is passed to the callback.</param>
             <returns>An object which must be passed to the EndHistoryReadProcessed() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadProcessed(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadProcessedDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
             <summary>
             Reads the processed history of variable values asynchronously from the OPC server based on a passed aggregate.
             </summary>
             <remarks>
             This method is used to read processed historical values of one or more nodes in an ordered sequence for the defined time domain.
             Continuation points are used to continue the read of the ordered sequence if not all data can be returned in one read or if the
             server was not able to finish the processing before the timeout expired. The returned number can be limited by the server and
             may be 0 if the server was not able to finish one calculation before the service timeout expired.
             See \ref ReleaseHistoryContinuationPoints for cleaning up resources in the server if read should not be continued with the returned continuation point.
            
             The processed values are calculated with the specified aggregate based on the raw data in the history database. The server must
             use start time, end time, and the resample interval to generate a sequence of time intervals and then calculate an aggregate for each interval.
             </remarks>
             <param name="nodesToRead">List of variable nodes to read processed data history from. Includes a continuation point to continue previous read requests.</param>
             <param name="details">Configuration parameters for the history read of processed data.
             Configuration parameters include
             - The start time of the requested time domain
             - The end time of the requested time domain
             - Time processing interval used to calculate one aggregated value from the raw values
             - The NodeId of the aggregate used for the calculation of the values
             </param>
             <param name="timestampsToReturn">The timestamps to return.</param>
             <param name="settings">The general settings for the request. If
             null, the default settings from the property \ref DefaultRequestSettings are used.</param>
             <param name="callback">The callback to use when the async call completes.</param>
             <param name="userData">The user data that is passed to the callback.</param>
             <returns>An object which must be passed to the EndHistoryReadProcessed() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryReadProcessed(System.IAsyncResult)">
            <summary>
            Completes an asynchronous HistoryReadProcessed operation.
            </summary>
            <param name="result">The object returned from the \ref BeginHistoryReadProcessed method.</param>
            <returns>Result data for the requested nodes, time domain and aggregates. A continuation point is included for a node if not all results could be returned or processed before the timeout expired.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadAtTime(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadAtTimeDetails)">
            <summary>
            Reads the history of item values synchronously from the OPC server for the given timestamps.
            </summary>
            <param name="nodesToRead">List of variable nodes to read data values at specified timestamps from.</param>
            <param name="details">Configuration parameters for the history read of data at specified timestamps.
            Configuration parameters include
            - Array of timestamps for which values are to be read
            - Flag for bounding value calculation
            </param>
            <returns>Result data for the requested nodes and time stamps.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadAtTime(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadAtTimeDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Reads the history of item values synchronously from the OPC server for the given timestamps.
            </summary>
            <param name="nodesToRead">List of variable nodes to read data values at specified timestamps from.</param>
            <param name="details">Configuration parameters for the history read of data at specified timestamps.
            Configuration parameters include
            - Array of timestamps for which values are to be read
            - Flag for bounding value calculation
            </param>
            <param name="timestampsToReturn">Enumeration for the timestamps to return with the values. Possible values are <c>source</c>, <c>server</c> or <c>both</c>. The option <c>neither</c> is invalid for history read.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns>Result data for the requested nodes and time stamps.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadAtTime(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadAtTimeDetails,System.AsyncCallback,System.Object)">
            <summary>
            Reads the history of item values asynchronously from the OPC server for the given timestamps.
            </summary>
            <param name="nodesToRead">List of variable nodes to read data values at specified timestamps from.</param>
            <param name="details">Configuration parameters for the history read of data at specified timestamps.
            Configuration parameters include
            - Array of timestamps for which values are to be read
            - Flag for bounding value calculation
            </param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndHistoryReadAtTime() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadAtTime(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadAtTimeDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Reads the history of item values asynchronously from the OPC server for the given timestamps.
            </summary>
            <param name="nodesToRead">List of variable nodes to read data values at specified timestamps from.</param>
            <param name="details">Configuration parameters for the history read of data at specified timestamps.
            Configuration parameters include
            - Array of timestamps for which values are to be read
            - Flag for bounding value calculation
            </param>
            <param name="timestampsToReturn">Enumeration for the timestamps to return with the values. Possible values are <c>source</c>, <c>server</c> or <c>both</c>. The option <c>neither</c> is invalid for history read.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndHistoryReadAtTime() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryReadAtTime(System.IAsyncResult)">
            <summary>
            Completes an asynchronous HistoryReadAtTime operation.
            </summary>
            <param name="result">The object returned from the \ref BeginHistoryReadAtTime method.</param>
            <returns>Result data for the requested nodes and time stamps.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ReleaseHistoryContinuationPoints(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId})">
            <summary>
            Releases the history continuation points.
            </summary>
            <param name="nodesToRead">The nodes to read.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ReleaseHistoryContinuationPoints(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Releases the history continuation points.
            </summary>
            <param name="nodesToRead">The nodes to read.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginReleaseHistoryContinuationPoints(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},System.AsyncCallback,System.Object)">
            <summary>
            Begins a release history continuation point operation.
            </summary>
            <param name="nodesToRead">The nodes to read.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndReleaseHistoryContinuationPoints method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginReleaseHistoryContinuationPoints(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a release history continuation point operation.
            </summary>
            <param name="nodesToRead">The nodes to read.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndReleaseHistoryContinuationPoints method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndReleaseHistoryContinuationPoints(System.IAsyncResult)">
            <summary>
            Ends an asynchronous release history continuation point operation.
            </summary>
            <param name="result">The object returned from the \ref BeginReleaseHistoryContinuationPoints method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryUpdateData(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateDataDetails})">
            <summary>
            Updates the history for a list of variables.
            </summary>
            <param name="nodesToUpdate">The list of variable nodes to update, including the data provided for the update.</param>
            <returns>The results for the update operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryUpdateData(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateDataDetails},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Updates the history for a list of variables.
            </summary>
            <param name="nodesToUpdate">The list of variable nodes to update, including the data provided for the update.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns>The results for the update operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryUpdateData(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateDataDetails},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to update the history for a list of variables.
            </summary>
            <param name="nodesToUpdate">The list of variable nodes to update, including the data provided for the update.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndHistoryUpdateData() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryUpdateData(System.IAsyncResult)">
            <summary>
            Ends an operation to update the history for a list of variables.
            </summary>
            <param name="result">The object returned from the \ref BeginHistoryUpdateData method.</param>
            <returns>The results for the update operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryUpdateStructureData(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateStructureDataDetails})">
            <summary>
            Updates the history for a list of for structured metadata variables.
            </summary>
            <param name="nodesToUpdate">The list of variable nodes to update, including the data provided for the update.</param>
            <returns>The results for the update operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryUpdateStructureData(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateStructureDataDetails},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Updates the history for a list of structured metadata variables.
            </summary>
            <param name="nodesToUpdate">The list of variable nodes to update, including the data provided for the update.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns>The results for the update operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryUpdateStructureData(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateStructureDataDetails},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to update the history for a list of structured metadata variables.
            </summary>
            <param name="nodesToUpdate">The list of variable nodes to update, including the data provided for the update.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndHistoryUpdateStructureData() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryUpdateStructureData(System.IAsyncResult)">
            <summary>
            Ends an operation to update the history for a list of structured metadata variables.
            </summary>
            <param name="result">The object returned from the \ref BeginHistoryUpdateStructureData method.</param>
            <returns>The results for the update operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryDeleteRaw(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteRawModifiedDetails})">
            <summary>
            Deletes the history for a list of variables in the passed time domain.
            </summary>
            <param name="nodesToDelete">The variables with history to delete, including the time domain for the data to be deleted.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryDeleteRaw(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteRawModifiedDetails},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Deletes the history for a list of variables in the passed time domain.
            </summary>
            <param name="nodesToDelete">The variables with history to delete, including the time domain for the data to be deleted.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryDeleteRaw(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteRawModifiedDetails},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to delete the history for a list of variables in the passed time domain.
            </summary>
            <param name="nodesToDelete">The variables with history to delete, including the time domain for the data to be deleted.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndHistoryDeleteRaw() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryDeleteRaw(System.IAsyncResult)">
            <summary>
            Ends an operation to delete the history for a list of variables.
            </summary>
            <param name="result">The object returned from the \ref BeginHistoryDeleteRaw method.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryDeleteAtTime(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteAtTimeDetails})">
            <summary>
            Deletes the history for a list of variables for the passed timestamps.
            </summary>
            <param name="nodesToDelete">The variables with history to delete, including the timestamps for the data to be deleted.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryDeleteAtTime(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteAtTimeDetails},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Deletes the history for a list of variables for the passed timestamps.
            </summary>
            <param name="nodesToDelete">The variables with history to delete, including the timestamps for the data to be deleted.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryDeleteAtTime(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteAtTimeDetails},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to delete the history for a list of variables for the passed timestamps.
            </summary>
            <param name="nodesToDelete">The variables with history to delete, including the timestamps for the data to be deleted.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndHistoryDeleteAtTime() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryDeleteAtTime(System.IAsyncResult)">
            <summary>
            Ends an operation to delete the history for a list of variables.
            </summary>
            <param name="result">The object returned from the \ref BeginHistoryDeleteAtTime method.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadEventDetails)">
            <summary>
            Reads the event history for a list of event notifier objects
            synchronously from an OPC server.
            </summary>
            <param name="nodesToRead">List of event notifier object nodes to read event history from. Includes a continuation point to continue previous read requests.</param>
            <param name="details">Configuration parameters for the history read of events.
            Configuration parameters include,
            - the start time of the requested time domain,
            - the end time of the requested time domain,
            - the event filter,
            - a limitation of the number of results per node.
            </param>
            <returns>
            The event history for each notifier.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadEventDetails,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Reads the event history for a list of event notifier objects
            synchronously from an OPC server.
            </summary>
            <param name="nodesToRead">List of event notifier object nodes to read event history from. Includes a continuation point to continue previous read requests.</param>
            <param name="details">Configuration parameters for the history read of events.
            Configuration parameters include
            - the start time of the requested time domain,
            - the end time of the requested time domain,
            - the event filter,
            - a limitation of the number of results per node.
            </param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns>
            The event history for each notifier.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadEventDetails,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to read the event history for a list of notifiers.
            </summary>
            <param name="nodesToRead">List of event notifier object nodes to read event history from. Includes a continuation point to continue previous read requests.</param>
            <param name="details">Configuration parameters for the history read of events.
            Configuration parameters include
            - the start time of the requested time domain,
            - the end time of the requested time domain,
            - the event filter,
            - a limitation of the number of results per node.
            </param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndHistoryReadEvent() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadEventDetails,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to read the event history for a list of notifiers.
            </summary>
            <param name="nodesToRead">List of event notifier object nodes to read event history from. Includes a continuation point to continue previous read requests.</param>
            <param name="details">Configuration parameters for the history read of events.
            Configuration parameters include
            - the start time of the requested time domain,
            - the end time of the requested time domain,
            - the event filter,
            - a limitation of the number of results per node.
            </param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndHistoryReadEvent() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryReadEvent(System.IAsyncResult)">
            <summary>
            Ends an operation to read the event history for a list of notifiers.
            </summary>
            <param name="result">The object returned from the \ref BeginHistoryReadEvent method.</param>
            <returns>
            The event history for each notifier.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryUpdateEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateEventDetails})">
            <summary>
            Updates the event history for a list of event notifier objects.
            </summary>
            <param name="nodesToUpdate">List of event notifier objects to update, including the event data and update settings.</param>
            <returns>
            The results for the update operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryUpdateEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateEventDetails},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Updates the event history for a list of event notifier objects.
            </summary>
            <param name="nodesToUpdate">List of event notifier objects to update, including the event data and update settings.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns>
            The results for the update operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryUpdateEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateEventDetails},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to update the history for a list of event notifier objects.
            </summary>
            <param name="nodesToUpdate">List of event notifier objects to update, including the event data and update settings.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndHistoryUpdateEvent() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryUpdateEvent(System.IAsyncResult)">
            <summary>
            Ends an operation to update the history for a list of event notifier objects.
            </summary>
            <param name="result">The object returned from the \ref BeginHistoryUpdateEvent method.</param>
            <returns>
            The results for the update operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryDeleteEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteEventDetails})">
            <summary>
            Deletes the event history for a list of event notifier objects.
            </summary>
            <param name="nodesToUpdate">List of event notifier objects and Ids of events to delete.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryDeleteEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteEventDetails},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Deletes the event history for a list of event notifier objects.
            </summary>
            <param name="nodesToUpdate">List of event notifier objects and Ids of events to delete.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryDeleteEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteEventDetails},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to delete the event history for a list of event notifier objects.
            </summary>
            <param name="nodesToUpdate">List of event notifier objects and Ids of events to delete.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndHistoryDeleteEvent() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryDeleteEvent(System.IAsyncResult)">
            <summary>
            Ends an operation to delete the history for a list of variables.
            </summary>
            <param name="result">The object returned from the \ref BeginHistoryDeleteEvent method.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.AddNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.AddNodesItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Adds the nodes.
            </summary>
            <param name="nodesToAdd">The nodes to add.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginAddNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.AddNodesItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an add nodes operation.
            </summary>
            <param name="nodesToAdd">The nodes to add.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the \ref EndAddNodes method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndAddNodes(System.IAsyncResult)">
            <summary>
            Completes an asynchronous add nodes operation.
            </summary>
            <param name="result">The object returned from the \ref BeginAddNodes method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginAddNodes(UnifiedAutomation.UaClient.Session.AddNodesAsyncResult)">
            <summary>
            Begins the add nodes operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnAddNodesComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous add nodes operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.AddReferences(System.Collections.Generic.IList{UnifiedAutomation.UaBase.AddReferencesItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Adds the references.
            </summary>
            <param name="referencesToAdd">The references to add.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginAddReferences(System.Collections.Generic.IList{UnifiedAutomation.UaBase.AddReferencesItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins the add references operation.
            </summary>
            <param name="referencesToAdd">The references to add.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndAddReferences() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndAddReferences(System.IAsyncResult)">
            <summary>
            Ends and asynchronous add references operation.
            </summary>
            <param name="result">The object returned from the BeginAddReferences() method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginAddReferences(UnifiedAutomation.UaClient.Session.AddReferencesAsyncResult)">
            <summary>
            Begins the add references operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnAddReferencesComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous add references operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.DeleteNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteNodesItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Deletes the nodes.
            </summary>
            <param name="nodesToDelete">The nodes to delete.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDeleteNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteNodesItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins the delete nodes operation.
            </summary>
            <param name="nodesToDelete">The nodes to delete.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndDeleteNodes() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndDeleteNodes(System.IAsyncResult)">
            <summary>
            Ends the delete nodes operation.
            </summary>
            <param name="result">The object returned from the BeginDeleteNodes() method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDeleteNodes(UnifiedAutomation.UaClient.Session.DeleteNodesAsyncResult)">
            <summary>
            Begins the delete nodes operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnDeleteNodesComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous delete nodes operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.DeleteReferences(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteReferencesItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Deletes the references.
            </summary>
            <param name="referencesToDelete">The references to delete.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDeleteReferences(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteReferencesItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins the delete references operation.
            </summary>
            <param name="referencesToDelete">The references to delete.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndDeleteReferences() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndDeleteReferences(System.IAsyncResult)">
            <summary>
            Ends the delete references operation.
            </summary>
            <param name="result">The object returned from the BeginDeleteReferences() method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDeleteReferences(UnifiedAutomation.UaClient.Session.DeleteReferencesAsyncResult)">
            <summary>
            Begins the delete references operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnDeleteReferencesComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous delete references operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.RegisterNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.NodeId},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Registers the nodes.
            </summary>
            <param name="nodesToRegister">The nodes to register.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginRegisterNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.NodeId},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a register nodes operation.
            </summary>
            <param name="nodesToRegister">The nodes to register.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndRegisterNodes() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndRegisterNodes(System.IAsyncResult)">
            <summary>
            Ends an asynchronous register nodes operation.
            </summary>
            <param name="result">The object returned from the BeginRegisterNodes() method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginRegisterNodes(UnifiedAutomation.UaClient.Session.RegisterNodesAsyncResult)">
            <summary>
            Begins the register nodes operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnRegisterNodesComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous register nodes operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.UnregisterNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.NodeId},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Unregisters the nodes.
            </summary>
            <param name="nodesToUnregister">The nodes to unregister.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginUnregisterNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.NodeId},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an unregister nodes operation.
            </summary>
            <param name="nodesToUnregister">The nodes to unregister.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndUnregisterNodes() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndUnregisterNodes(System.IAsyncResult)">
            <summary>
            Ends an asynchronous unregister nodes operation.
            </summary>
            <param name="result">The object returned from the BeginUnregisterNodes() method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginUnregisterNodes(UnifiedAutomation.UaClient.Session.UnregisterNodesAsyncResult)">
            <summary>
            Begins the unregister nodes operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnUnregisterNodesComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous unregister nodes operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginReactivate(UnifiedAutomation.UaClient.Session.ReactivateAsyncResult)">
            <summary>
            Begins a reactivate operation.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnReactivateComplete(System.IAsyncResult)">
            <summary>
            Ends a reactivate operation.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnReactivateSessionComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous reactivate session operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginCreateSubscription(UnifiedAutomation.UaClient.Subscription,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a create subscription operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndCreateSubscription() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndCreateSubscription(System.IAsyncResult)">
            <summary>
            Ends a create subscription operation.
            </summary>
            <param name="result">The object returned from the BeginCreateSubscription() method.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnCreateSubscriptionComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous create subscription operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginModifySubscription(UnifiedAutomation.UaClient.Subscription,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a modify subscription operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndModifySubscription() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndModifySubscription(System.IAsyncResult)">
            <summary>
            Ends the modify subscription operation.
            </summary>
            <param name="result">The object returned from the BeginModifySubscription method.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnModifySubscriptionComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous modify subscription operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDeleteSubscription(System.UInt32,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a delete subscription operation.
            </summary>
            <param name="subscriptionId">The subscription id.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndDeleteSubscription() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndDeleteSubscription(System.IAsyncResult)">
            <summary>
            Ends the delete subscription operation.
            </summary>
            <param name="result">The object returned from the \ref BeginDeleteSubscription method.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.RemoveSubscription(System.UInt32)">
            <summary>
            Removes the subscription from the session.
            </summary>
            <param name="subscriptionId">The subscription to remove.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnDeleteSubscriptionComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous delete subscription operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginSetPublishingMode(UnifiedAutomation.UaClient.Subscription,System.Boolean,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a set publishing mode operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="publishingEnabled">if set to <c>true</c> [publishing enabled].</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndSetPublishingMode() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndSetPublishingMode(System.IAsyncResult)">
            <summary>
            Ends the set publishing mode operation.
            </summary>
            <param name="result">The object returned from the \ref BeginSetPublishingMode method.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnSetPublishingModeComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous set publishing mode operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.StartPublishing">
            <summary>
            Begins publishing for a subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginPublish">
            <summary>
            Begins the publish.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetAcknowledgements">
            <summary>
            Gets the acknowledgements for previous notification messages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnPublishComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous publish operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginCreateMonitoredItems(UnifiedAutomation.UaClient.Subscription,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a create monitored items operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="monitoredItems">The monitored items.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndCreateMonitoredItems() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndCreateMonitoredItems(System.IAsyncResult)">
            <summary>
            Ends the create monitored items operation.
            </summary>
            <param name="result">The object returned from the \ref BeginCreateMonitoredItems method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginCreateMonitoredItems(UnifiedAutomation.UaClient.Session.CreateMonitoredItemsAsyncResult)">
            <summary>
            Begins the create monitored items.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnCreateMonitoredItemsComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous create monitored items operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginModifyMonitoredItems(UnifiedAutomation.UaClient.Subscription,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a modify monitored items operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="monitoredItems">The monitored items.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndModifyMonitoredItems() method. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndModifyMonitoredItems(System.IAsyncResult)">
            <summary>
            Ends the modify monitored items operation.
            </summary>
            <param name="result">The object returned from the \ref BeginModifyMonitoredItems method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginModifyMonitoredItems(UnifiedAutomation.UaClient.Session.ModifyMonitoredItemsAsyncResult)">
            <summary>
            Begins the modify monitored items operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnModifyMonitoredItemsComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous modify monitored items operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDeleteMonitoredItems(UnifiedAutomation.UaClient.Subscription,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins the delete monitored items operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="monitoredItems">The monitored items.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndDeleteMonitoredItems() method. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndDeleteMonitoredItems(System.IAsyncResult)">
            <summary>
            Ends the delete monitored items operation.
            </summary>
            <param name="result">The object returned from the \ref BeginDeleteMonitoredItems method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDeleteMonitoredItems(UnifiedAutomation.UaClient.Session.DeleteMonitoredItemsAsyncResult)">
            <summary>
            Begins the delete monitored items operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnDeleteMonitoredItemsComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous delete monitored items operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginSetMonitoringMode(UnifiedAutomation.UaClient.Subscription,UnifiedAutomation.UaBase.MonitoringMode,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a set monitoring mode operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="monitoredItems">The monitored items.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndSetMonitoringMode() method. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndSetMonitoringMode(System.IAsyncResult)">
            <summary>
            Ends the set monitoring mode operation.
            </summary>
            <param name="result">The object returned from the \ref BeginSetMonitoringMode method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginSetMonitoringMode(UnifiedAutomation.UaClient.Session.SetMonitoringModeAsyncResult)">
            <summary>
            Begins the set monitoring mode operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnSetMonitoringModeComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous set monitoring mode operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginRepublish(UnifiedAutomation.UaClient.Subscription,System.UInt32,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a republish operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="retransmitSequenceNumber">The retransmit sequence number.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndRepublish() method. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndRepublish(System.IAsyncResult,UnifiedAutomation.UaBase.NotificationMessage@)">
            <summary>
            Ends a republish operation.
            </summary>
            <param name="result">The object returned from the \ref BeginRepublish method.</param>
            <param name="notificationMessage">The notification message.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnRepublishComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous republish operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginTransferSubscriptions(UnifiedAutomation.UaClient.RequestSettings,System.Collections.Generic.List{UnifiedAutomation.UaClient.Subscription})">
            <summary>
            Begins a transfer subscription operation.
            </summary>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <param name="subscriptions">The subscriptions to transfer.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnTransferSubscriptionComplete(System.IAsyncResult)">
            <summary>
            Called when an asychronous transfer subscription operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginReconnect(UnifiedAutomation.UaClient.Session.ConnectAsyncResult)">
            <summary>
            Begins a reconnect operation.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnReconnectComplete(System.IAsyncResult)">
            <summary>
            Called when a background reconnect operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginReconnectCycle(System.IAsyncResult,System.Boolean)">
            <summary>
            Begins the reconnect cycle.
            </summary>
            <param name="result">The result.</param>
            <param name="immediate">Whether to attempt a reconnect immediately</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetEndpointForReconnect(System.Uri)">
            <summary>
            Gets the endpoint to use for reconnecting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnReconnectCycle(System.Object)">
            <summary>
            Called when reconnect cycle starts.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnWatchdogCycle(System.Object)">
            <summary>
            Called when the watchdog timer expires.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnWatchdogReadComplete(System.IAsyncResult)">
            <summary>
            Called when a watchdog read operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetApplicationDescription">
            <summary>
            Gets the application description for the client application.
            </summary>
            <returns>The application description.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetEndpointConfiguration(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Gets the endpoint configuration.
            </summary>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns>The endpoint configuration to use.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetClientSignature(System.String,UnifiedAutomation.UaBase.ICertificate,System.Byte[])">
            <summary>
            Gets the client signature.
            </summary>
            <param name="securityPolicyUri">The security policy URI.</param>
            <param name="serverCertificate">The server certificate.</param>
            <param name="serverNonce">The server nonce.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetUserIdentityToken(UnifiedAutomation.UaClient.UserIdentity,UnifiedAutomation.UaBase.EndpointDescription,UnifiedAutomation.UaBase.ICertificate,System.Byte[],UnifiedAutomation.UaBase.SignatureData@)">
            <summary>
            Gets the user identity token.
            </summary>
            <param name="identity">The identity.</param>
            <param name="endpoint">The endpoint.</param>
            <param name="serverCertificate">The server certificate.</param>
            <param name="serverNonce">The server nonce.</param>
            <param name="tokenSignature">The token signature.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ValidateCertificate(UnifiedAutomation.UaBase.ICertificate,System.Uri)">
            <summary>
            Validates the server certificate.
            </summary>
            <param name="certificate">The certificate.</param>
            <param name="endpointUrl">The endpoint URL being used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.CheckSessionState(UnifiedAutomation.UaClient.Session.State)">
            <summary>
            Checks the state of the session.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ChangeSessionState(UnifiedAutomation.UaClient.Session.State)">
            <summary>
            Changes the state of the session.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetRequestHeader(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Gets the request header.
            </summary>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property \ref DefaultRequestSettings are used.</param>
            <returns>The request header.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetDiscoveryUrlFromUrl(System.Uri,System.String)">
            <summary>
            Gets the discovery URL from URL.
            </summary>
            <param name="endpointUrl">The endpoint URL.</param>
            <param name="transportProfileUri">The transport profile URI.</param>
            <returns>
            The discovery URL.
            </returns>
            <remarks>
            This method assumes that WS-* based endpoints use the '/discovery' suffix.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.AdjustSubscriptionIntervals(System.Double,System.Double,System.Double,System.UInt32@,System.UInt32@)">
            <summary>
            Adjusts the intervals for a subscription.
            </summary>
            <param name="requestedPublishingInterval">The requested publishing interval.</param>
            <param name="requestedMaxKeepAliveTime">The requested max keep alive time.</param>
            <param name="requestedLifetime">The requested lifetime.</param>
            <param name="requestedMaxKeepAliveCount">The requested max keep alive count.</param>
            <param name="requestedLifetimeCount">The requested lifetime count.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.RaiseConnectionStatusUpdateEvent(UnifiedAutomation.UaClient.ServerConnectionStatus,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Raises the connection status update event.
            </summary>
            <param name="status">The status.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.UpdateFilterResult(UnifiedAutomation.UaClient.MonitoredItem,UnifiedAutomation.UaBase.ExtensionObject,UnifiedAutomation.UaBase.DiagnosticInfoCollection,System.Collections.Generic.IList{System.String})">
            <summary>
            Updates the filter result.
            </summary>
            <param name="monitoredItem">The monitored item.</param>
            <param name="result">The result.</param>
            <param name="diagnosticInfos">The diagnostic infos.</param>
            <param name="stringTable">The string table.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.Application">
            <summary>
            Gets the application.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.SessionId">
            <summary>
            Gets the session id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.Cache">
            <summary>
            Gets the cache manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.Model">
            <summary>
            Gets the model manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.DefaultRequestSettings">
            <summary>
            Gets or sets the default settings used as fallback for OPC UA service calls.
            </summary>
            <value>
            The default request settings include a timeout, diagnostic settings, request id, and maximum number of operations per request.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.SessionName">
            <summary>
            Gets or sets the name of the session.
            </summary>
            <value>
            The name of the session.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.UserIdentity">
            <summary>
            Gets or sets the user identity.
            </summary>
            <value>
            The user identity.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.PreferredLocales">
            <summary>
            Gets or sets the preferred locales.
            </summary>
            <value>
            The preferred locales.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.SecureChannelLifetime">
            <summary>
            Gets or sets the secure channel lifetime.
            </summary>
            <value>
            The secure channel lifetime.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.SecureChannelTimeout">
            <summary>
            Gets or sets the secure channel timeout.
            </summary>
            <value>
            The secure channel timeout.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.SessionTimeout">
            <summary>
            Gets or sets the session timeout.
            </summary>
            <value>
            The session timeout.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.WatchdogCycleTime">
            <summary>
            Gets or sets the watchdog cycle time.
            </summary>
            <value>
            The watchdog cycle time.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.WatchdogTimeout">
            <summary>
            Gets or sets the watchdog timeout.
            </summary>
            <value>
            The watchdog timeout.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.AutomaticReconnect">
            <summary>
            Gets or sets a value indicating whether the session should automatically reconnect on error.
            </summary>
            <value>
              <c>true</c> if the session should automatically reconnect; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.ReconnectDelay">
            <summary>
            Gets or sets the delay between reconnect attempts.
            </summary>
            <value>
            The delay between reconnect attempts.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.PublishPipelineDepth">
            <summary>
            Gets or sets the publish pipeline depth.
            </summary>
            <value>
            The publish pipeline depth.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.UseDnsNameAndPortFromDiscoveryUrl">
            <summary>
            Gets or sets a value indicating whether to use DNS name and port from discovery URL when connecting to a server.
            </summary>
            <value>
            <c>true</c> if the DNS name and port from discovery URL should be used when connecting to a server; otherwise, <c>false</c>.
            </value>
            <remarks>
            Sometimes the DNS name of the server is not accessible to the Client. Setting this flag will automatically
            use the DNS name of the URL passed to the Connect method when connecting to the server.
            Note that setting this flag to true makes it easier for hackers to trick clients into revealing
            confidential information (such as passwords) by redirecting clients to a rogue gateway.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.EndpointDescription">
            <summary>
            Gets or sets the endpoint description.
            </summary>
            <value>
            The endpoint description.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.ConnectionStatus">
            <summary>
            Gets the server connection status.
            </summary>
            <value>
            The server connection status.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.AlternativeEndpointUrls">
            <summary>
            Gets or sets the alternative endpoint urls.
            </summary>
            <value>
            The alternative endpoint urls.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.DefaultTimestampToReturn">
            <summary>
            Gets or sets the default timestamp to return.
            </summary>
            <value>
            The default timestamp to return.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.MessageContext">
            <summary>
            Gets the message context.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.NamespaceUris">
            <summary>
            Gets the namespace uris.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.ServerUris">
            <summary>
            Gets the server uris.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.Factory">
            <summary>
            Gets the dictionary of data types known to the stack.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Session.ConnectionStatusUpdate">
            <summary>
            Raised when the connection status has been updated.
            </summary>
            <remarks>
            The SDK automatically detects if the target is a GUI control and ensures that the callback is invoked on the correct thread.
            </remarks>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Session.SessionValidationError">
            <summary>
            Raised when a non-fatal error occurs during session establishment.
            </summary>
            <remarks>
            The SDK automatically detects if the target is a GUI control and ensures that the callback is invoked on the correct thread.
            </remarks>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Session.UpdateEndpoint">
            <summary>
            Raised before connecting to the server and it allows the application to modify the endpoint used to connect.
            </summary>
            <remarks>
            The SDK automatically detects if the target is a GUI control and ensures that the callback is invoked on the correct thread.
            If the target is a GUI control and the synchronous Connect method can be used, this EventHandler must not show a dialog.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.ConnectAsyncResult">
            <summary>
            Stores state information for asynchronous connect operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.DisconnectAsyncResult">
            <summary>
            Stores state information for asynchronous disconnect operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.CancelAsyncResult">
            <summary>
            Stores state information for asynchronous cancel operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.ReadAsyncResult">
            <summary>
            Stores state information for asynchronous read operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.WriteAsyncResult">
            <summary>
            Stores state information for asynchronous write operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.ChangeUserAsyncResult">
            <summary>
            Stores state information for asynchronous change user operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.BrowseAsyncResult">
            <summary>
            Stores state information for asynchronous browse operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.BrowseListAsyncResult">
            <summary>
            Stores state information for asynchronous browse operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.TranslateBrowsePathAsyncResult">
            <summary>
            Stores state information for asynchronous read operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.CallListAsyncResult">
            <summary>
            Stores state information for asynchronous browse operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.HistoryReadEventAsyncResult">
             <summary>
            
             </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.AddNodesAsyncResult">
            <summary>
            Stores state information for asynchronous add nodes operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.AddReferencesAsyncResult">
            <summary>
            Stores state information for asynchronous add references operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.DeleteNodesAsyncResult">
            <summary>
            Stores state information for asynchronous delete nodes operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.DeleteReferencesAsyncResult">
            <summary>
            Stores state information for asynchronous delete references operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.RegisterNodesAsyncResult">
            <summary>
            Stores state information for asynchronous register nodes operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.UnregisterNodesAsyncResult">
            <summary>
            Stores state information for asynchronous unregister nodes operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.ReactivateAsyncResult">
            <summary>
            Stores state information for asynchronous reactivate operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.CreateSubscriptionAsyncResult">
            <summary>
            Stores state information for asynchronous create subscription operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.ModifySubscriptionAsyncResult">
            <summary>
            Stores state information for asynchronous modify subscription operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.DeleteSubscriptionAsyncResult">
            <summary>
            Stores state information for asynchronous delete subscription operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.SetPublishingModeAsyncResult">
            <summary>
            Stores state information for asynchronous set publishing mode operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.PublishAsyncResult">
            <summary>
            Stores state information for asynchronous publish operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.CreateMonitoredItemsAsyncResult">
            <summary>
            Stores state information for asynchronous create monitored items operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.ModifyMonitoredItemsAsyncResult">
            <summary>
            Stores state information for asynchronous modify monitored items operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.DeleteMonitoredItemsAsyncResult">
            <summary>
            Stores state information for asynchronous delete monitored items operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.SetMonitoringModeAsyncResult">
            <summary>
            Stores state information for asynchronous set monitoring mode operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.RepublishAsyncResult">
            <summary>
            Stores state information for asynchronous republish operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.TransferSubscriptionAsyncResult">
            <summary>
            Stores state information for asynchronous transfer subscription operations.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.State">
            <summary>
            The possible states for the session.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SecuritySelection">
            @ingroup UaClientLibraryHelper
             <summary>
             The options for selecting security.
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SecuritySelection.None">
            <summary>
            No security.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SecuritySelection.BestAvailable">
            <summary>
            Best available security.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.RetryInitialConnect">
            @ingroup UaClientLibraryHelper
             <summary>
             Whether to retry a failed connect in the background.
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.RetryInitialConnect.No">
            <summary>
            Do not retry a failed connect.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.RetryInitialConnect.Yes">
            <summary>
            Retry a failed connect in the background.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.TypeDescriptionSelection">
            @ingroup UaClientLibraryHelper
             <summary>
             The options for selecting the type description.
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.TypeDescriptionSelection.Basic">
            <summary>
            Returns the hierachy that is explicitly declared for the type.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.TypeDescriptionSelection.FullyInherited">
            <summary>
            Returns the fully inherited for the type.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SubscriptionCleanupPolicy">
            @ingroup UaClientLibraryHelper
             <summary>
             The options for cleaning up subscriptions.
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SubscriptionCleanupPolicy.Keep">
            <summary>
            Keep the subscriptions.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SubscriptionCleanupPolicy.Delete">
            <summary>
            Delete the subscriptions.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ServerConnectionStatus">
            @ingroup UaClientLibraryHelper
             <summary>
             Information about the connection with the server.
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.Disconnected">
            <summary>
            Disconnected.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.Connected">
            <summary>
            Connected.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.ConnectionWarningWatchdogTimeout">
            <summary>
            The watchdog timer has timed out.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.ConnectionErrorClientReconnect">
            <summary>
            The connection is in an error state, reconnecting.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.ServerShutdownInProgress">
            <summary>
            The server is going to shutdown.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.ServerShutdown">
            <summary>
            The server has shutdown.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.SessionAutomaticallyRecreated">
            <summary>
            A new session was re-created.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.Connecting">
            <summary>
            Attempting to connect to the server.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.LicenseExpired">
            <summary>
            No valid license has been found for the application.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ServerConnectionStatusUpdateEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a session validation error occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConnectionStatusUpdateEventArgs.#ctor(UnifiedAutomation.UaClient.ServerConnectionStatus,UnifiedAutomation.UaClient.ServerConnectionStatus,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.ServerConnectionStatusUpdateEventArgs.Status">
            <summary>
            Gets the status.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.ServerConnectionStatusUpdateEventArgs.PreviousStatus">
            <summary>
            Gets the previous status.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.ServerConnectionStatusUpdateEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ServerConnectionStatusUpdateEventHandler">
            <summary>
            Used to handled changes to the connection state.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SessionValidationEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a session validation error occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SessionValidationEventArgs.#ctor(UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SessionValidationEventArgs.Error">
            <summary>
            The error that occurred.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SessionValidationEventArgs.Ignore">
            <summary>
            Whether the error can be ignored.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SessionValidationEventHandler">
            <summary>
            Used to handled session validation errors.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.UpdateEndpointEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a endpoint is about to be used to connect to a server.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.UpdateEndpointEventArgs.#ctor(System.Uri,UnifiedAutomation.UaBase.EndpointDescription,System.Collections.Generic.IList{UnifiedAutomation.UaBase.EndpointDescription})">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UpdateEndpointEventArgs.DiscoveryUrl">
            <summary>
            Gets the URL used to fetch the endpoints.
            </summary>
            <value>
            The discovery URL.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UpdateEndpointEventArgs.UseDnsNameAndPortFromDiscoveryUrl">
            <summary>
            Gets or sets a value indicating whether to use the DNS name and port from the discovery URL.
            </summary>
            <value>
            <c>true</c> if the DNS name and port from the discovery URL is used to connect; otherwise, <c>false</c>.
            </value>
            <remarks>
            The URLs returned by the server may not be accessible to the client.
            The DNS name from the discovery URL is a suitable fallback behavoir but will trigger a domain mismatch error.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UpdateEndpointEventArgs.SelectedEndpoint">
            <summary>
            Gets or sets the currently selected endpoint.
            </summary>
            <value>
            The selected endpoint.
            </value>
            <remarks>
            The receiver of UpdateEndpoint event can change this to whatever they want.
            Setting it to NULL means the connect operation will be aborted.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UpdateEndpointEventArgs.AvailableEndpoints">
            <summary>
            Gets the available endpoints.
            </summary>
            <value>
            The available endpoints.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.UpdateEndpointEventHandler">
            <summary>
            Used to handled update endpoint events.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ClientUtils">
            @ingroup UaClientLibraryHelper
             <summary>
             Various utility functions for clients.
             </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.CacheManager">
            @ingroup UaClientApi
             <summary>
             Maintains a local cache of nodes and their attribute values.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.#ctor(UnifiedAutomation.UaClient.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.CacheManager"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetDisplayText(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Gets the display text.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetDisplayText(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the display text.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetDisplayText(UnifiedAutomation.UaBase.NodeId,System.String)">
            <summary>
            Gets the node id which is the target of the browse path.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetNodeId(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Gets the node id which is the target of the browse path (follows hierarchical references).
            </summary>
            <param name="rootId">The root id.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetEnumerationText(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Gets the display text for the enumerated value.
            </summary>
            <param name="nodeId">The variable or data type node id.</param>
            <param name="value">The value.</param>
            <returns>
            The text for the enumerated value.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetEnumerationText(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Gets the display text for the enumerated value.
            </summary>
            <param name="nodeId">The variable or data type node id.</param>
            <param name="value">The value.</param>
            <returns>
            The text for the enumerated value.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetEnumerationText(UnifiedAutomation.UaBase.NodeId,System.Int32,System.String)">
            <summary>
            Gets the display text for the enumerated value.
            </summary>
            <param name="nodeId">The variable or data type node id.</param>
            <param name="enumValue">The enum value.</param>
            <param name="defaultText">The default text.</param>
            <returns>
            The text for the enumerated value.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetAvailableDataEncodings(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the available data encodings.
            </summary>
            <param name="nodeId">The variable or data type node id.</param>
            <returns>The available encodings. Null if none are available.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetAttribute``1(UnifiedAutomation.UaBase.NodeId,System.UInt32,``0)">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nodeId">The node id.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The attribute value, the defaultValue if the attribute is not found.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.Clear(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Clears the cached information for the specified node.
            </summary>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.IsKnown(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Determines whether a node id is a known type id.
            </summary>
            <param name="typeId">The type extended identifier.</param>
            <returns>
              <c>true</c> if the specified type id is known; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.IsKnown(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Determines whether a node id is a known type id.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>
              <c>true</c> if the specified type id is known; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindSuperType(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Returns the immediate supertype for the type.
            </summary>
            <param name="typeId">The extended type identifier.</param>
            <returns>
            A type identifier of the <paramref name="typeId "/>
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindSuperType(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Returns the immediate supertype for the type.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>
            The immediate supertype identifier for <paramref name="typeId"/>
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.IsTypeOf(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Determines whether a type is a subtype of another type.
            </summary>
            <param name="subTypeId">The subtype identifier.</param>
            <param name="superTypeId">The supertype identifier.</param>
            <returns>
              <c>true</c> if <paramref name="superTypeId"/> is supertype of <paramref name="subTypeId"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.IsTypeOf(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Determines whether a type is a subtype of another type.
            </summary>
            <param name="subTypeId">The subtype identifier.</param>
            <param name="superTypeId">The supertype identyfier.</param>
            <returns>
              <c>true</c> if <paramref name="superTypeId"/> is supertype of <paramref name="subTypeId"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindReferenceTypeName(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Returns the node identifier for the reference type with the specified browse name.
            </summary>
            <param name="referenceTypeId">The reference type id.</param>
            <returns>
            A name qualified with a namespace for the reference <paramref name="referenceTypeId"/>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindReferenceType(UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Returns the qualified name for the reference type id.
            </summary>
            <param name="referenceTypeName">Name of the reference type.</param>
            <returns>
            The identifier for the <paramref name="referenceTypeName"/>
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindDataTypeId(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Returns the data type for the specified encoding.
            </summary>
            <param name="encodingId">The encoding id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindDataTypeId(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Returns the data type for the specified encoding.
            </summary>
            <param name="encodingId">The encoding id.</param>
            <returns>
            The data type for the <paramref name="encodingId"/>
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetEnumerationText(UnifiedAutomation.UaBase.NodeId,System.Int32)">
            <summary>
            Gets the enumeration text.
            </summary>
            <param name="propertyId">The property id.</param>
            <param name="enumValue">The enum value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.Translate(UnifiedAutomation.UaClient.CacheManager.CacheItem,UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Finds node which is the target of multiple hierarchical references from the cache item.
            </summary>
            <param name="item">The item.</param>
            <param name="browsePath">The browse path.</param>
            <returns>The target id. Null if it does not exist.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.Translate(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Finds node which is the target of multiple hierarchical references from the root.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindTarget(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Finds the node id at the end of specified path.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.Find(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Finds the specified node id.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.Find(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean)">
            <summary>
            Finds the specified node id.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">Set to <c>true</c> if the reference is an inverse reference.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindChildren(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean)">
            <summary>
            Finds the children.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">Set to <c>true</c> if the reference is an inverse reference.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindReferenceTypes(System.Collections.Generic.Dictionary{UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaClient.CacheManager.CacheItem},UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Finds the reference types.
            </summary>
            <param name="referenceTypeNames">The reference type names.</param>
            <param name="parentId">The parent id.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.CacheManager.DefaultRequestSettings">
            <summary>
            Gets or sets the default request settings.
            </summary>
            <value>
            The default request settings.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.CacheManager.CacheItem">
            <summary>
            An item in the cache.
            </summary>
        </member>
    </members>
</doc>
